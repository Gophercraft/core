package wdb

import (
	"bytes"
	"encoding/binary"
	"encoding/gob"
	"os"
	"path/filepath"
	"reflect"

	"github.com/Gophercraft/log"
	"github.com/syndtr/goleveldb/leveldb"
)

type Bucket struct {
	Type     reflect.Type
	Storage  *leveldb.DB
	Sequence uint64
}

type BucketEntryType uint8

const (
	BucketRecord BucketEntryType = iota // BucketRecord signifies an encoded record at this entry
	BucketAlias                         // BucketAlias signifies a key to another bucket entry.
)

type BucketKeyType uint8

const (
	BucketKeyStringID BucketKeyType = iota
	BucketKeyUint32ID
	BucketKeySequence
	BucketKeyEntry
)

type BucketKey struct {
	Type BucketKeyType
	Data []byte
}

type Cache struct {
	Dir     string
	Buckets map[reflect.Type]*Bucket
}

func (c *Cache) Bucket(typeOf reflect.Type) (*Bucket, error) {
	if c.Buckets[typeOf] != nil {
		return c.Buckets[typeOf], nil
	}

	bckt := new(Bucket)
	bckt.Type = typeOf
	var err error
	bckt.Storage, err = leveldb.OpenFile(c.BucketPath(typeOf), nil)
	if err != nil {
		return nil, err
	}
	c.Buckets[typeOf] = bckt
	return bckt, nil
}

func (c *Cache) BucketPath(typeOf reflect.Type) string {
	return filepath.Join(c.Dir, typeOf.String()+".cache")
}

func (c *Cache) Clear(typeOf reflect.Type) {
	bucket, ok := c.Buckets[typeOf]
	if ok {
		bucket.Storage.Close()
	}
	os.RemoveAll(c.BucketPath(typeOf))
}

func (c *Cache) Store(value reflect.Value) {
	if value.Kind() != reflect.Ptr {
		panic("value needs to be pointer " + value.Type().String())
	}

	base := value.Elem()
	bucket, err := c.Bucket(base.Type())
	if err != nil {
		panic(err)
	}

	keyBytes := []byte{}

	// Key format = uint8(BucketKeyType) | []uint8(bucket key data)

	if base.Kind() == reflect.Struct {
		idField := base.FieldByName("ID")
		if idField.Kind() == reflect.Uint32 {
			keyBytes = make([]byte, 5)
			keyBytes[0] = byte(BucketKeyUint32ID)
			binary.LittleEndian.PutUint32(keyBytes[1:], uint32(idField.Uint()))
		} else if idField.Kind() == reflect.Int32 {
			keyBytes = make([]byte, 5)
			keyBytes[0] = byte(BucketKeyUint32ID)
			binary.LittleEndian.PutUint32(keyBytes[1:], uint32(idField.Int()))
		} else if idField.Kind() == reflect.String {
			keyBytes = append([]byte{uint8(BucketKeyStringID)}, []byte(idField.String())...)
		} else if idField.IsValid() {
			panic("invalid ID type: " + idField.Type().String())
		} else {
			keyBytes = make([]byte, 9)
			keyBytes[0] = byte(BucketKeySequence)
			bucket.Sequence++
			binary.LittleEndian.PutUint64(keyBytes[1:], uint64(bucket.Sequence))
		}
	} else {
		keyBytes = make([]byte, 9)
		keyBytes[0] = byte(BucketKeySequence)
		bucket.Sequence++
		binary.LittleEndian.PutUint64(keyBytes[1:], uint64(bucket.Sequence))
	}

	data := new(bytes.Buffer)
	data.WriteByte(byte(BucketRecord))
	// Todo: assess speed of gob as opposed to other codecs
	if err := gob.NewEncoder(data).Encode(value.Interface()); err != nil {
		panic(err)
		return
	}

	if err := bucket.Storage.Put(keyBytes, data.Bytes(), nil); err != nil {
		panic(err)
		return
	}

	if base.Kind() == reflect.Struct {
		// Allow for fast lookup by entry using different BucketKeyType
		entryField := base.FieldByName("Entry")
		if entryField.IsValid() {
			entry := uint32(base.FieldByName("Entry").Uint())
			var aliasKey [5]byte
			aliasKey[0] = byte(BucketKeyEntry)
			binary.LittleEndian.PutUint32(aliasKey[1:], entry)
			data := append([]byte{uint8(BucketAlias)}, keyBytes...)
			if err := bucket.Storage.Put(aliasKey[:], data, nil); err != nil {
				panic(err)
			}
		}
	}
}

func (c *Cache) Lookup(keyType BucketKeyType, key, value interface{}) {
	storage := reflect.ValueOf(value)
	if storage.Kind() != reflect.Ptr {
		panic(storage.Type().String() + ": Lookup needs a pointer to a pointer to record data to")
	}

	if storage.Elem().Kind() != reflect.Map && storage.Elem().Kind() != reflect.Ptr {
		panic(storage.Type().String() + ": Storage type should be a reference")
	}

	baseType := storage.Type().Elem().Elem()

	bucket, err := c.Bucket(baseType)
	if err != nil {
		panic(err)
	}

	var keyBytes []byte
	switch keyType {
	case BucketKeyUint32ID:
		keyBytes = make([]byte, 5)
		binary.LittleEndian.PutUint32(keyBytes[1:], key.(uint32))
	case BucketKeyStringID:
		keyString := []byte(key.(string))
		keyBytes = make([]byte, 1+len(keyString))
		copy(keyBytes[1:], keyString)
	case BucketKeySequence:
		keyBytes = make([]byte, 9)
		binary.LittleEndian.PutUint64(keyBytes, key.(uint64))
	case BucketKeyEntry:
		keyBytes = make([]byte, 5)
		binary.LittleEndian.PutUint32(keyBytes[1:], key.(uint32))
	default:
		panic(keyType)
	}

	keyBytes[0] = uint8(keyType)
lookup:
	data, err := bucket.Storage.Get(keyBytes, nil)
	if err != nil {
		return
	}

	entryType := BucketEntryType(data[0])
	data = data[1:]

	switch entryType {
	case BucketAlias:
		keyBytes = data
		goto lookup
	}

	newPtr := reflect.New(baseType)
	err = gob.NewDecoder(bytes.NewReader(data)).Decode(newPtr.Interface())
	if err != nil {
		panic(err)
	}

	if storage.Elem().Kind() != reflect.Ptr {
		storage.Elem().Set(newPtr.Elem())
	} else {
		storage.Elem().Set(newPtr)
	}
}

func (c *Cache) Range(bucketKeyType BucketKeyType, callback interface{}) {
	fn := reflect.ValueOf(callback)

	inType := fn.Type().In(0)
	if inType.Kind() == reflect.Ptr {
		inType = inType.Elem()
	}

	in := reflect.New(inType)

	bucket, err := c.Bucket(inType)
	if err != nil {
		panic(err)
	}

	iter := bucket.Storage.NewIterator(nil, nil)
	for iter.Next() {
		// Remember that the contents of the returned slice should not be modified, and
		// only valid until the next call to Next.
		key := iter.Key()
		keyType := BucketKeyType(key[0])
		key = key[1:]
		entry := iter.Value()
		entryType := BucketEntryType(entry[0])
		entry = entry[1:]

		if entryType == BucketAlias {
			value, _ := bucket.Storage.Get(entry, nil)
			entryType = BucketEntryType(value[0])
			entry = value[1:]
		}

		// switch keyType {
		// case BucketKeyEntry:
		// case BucketKeySequence:

		// }

		if keyType == bucketKeyType {
			gob.NewDecoder(bytes.NewReader(entry)).Decode(in.Interface())
			fn.Call([]reflect.Value{in})
		}
	}
	iter.Release()
	err = iter.Error()
	log.Warn(err)
}

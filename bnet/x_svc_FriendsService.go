// generated by protoc-gen-gcraft : DO NOT EDIT
package bnet

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	protocol "github.com/Gophercraft/core/bnet/bgs/protocol"
	v1 "github.com/Gophercraft/core/bnet/bgs/protocol/friends/v1"
	math "math"
)

// shut the compiler up
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = protocol.E_MethodOptions

const FriendsServiceHash = 0xA3DDB1BD

type FriendsService interface {
	Subscribe(*Conn, uint32, *v1.SubscribeRequest)
	SendInvitation(*Conn, uint32, *v1.SendInvitationRequest)
	AcceptInvitation(*Conn, uint32, *v1.AcceptInvitationRequest)
	RevokeInvitation(*Conn, uint32, *v1.RevokeInvitationRequest)
	DeclineInvitation(*Conn, uint32, *v1.DeclineInvitationRequest)
	IgnoreInvitation(*Conn, uint32, *v1.IgnoreInvitationRequest)
	RemoveFriend(*Conn, uint32, *v1.RemoveFriendRequest)
	ViewFriends(*Conn, uint32, *v1.ViewFriendsRequest)
	UpdateFriendState(*Conn, uint32, *v1.UpdateFriendStateRequest)
	Unsubscribe(*Conn, uint32, *v1.UnsubscribeRequest)
	RevokeAllInvitations(*Conn, uint32, *v1.RevokeAllInvitationsRequest)
	GetFriendList(*Conn, uint32, *v1.GetFriendListRequest)
	CreateFriendship(*Conn, uint32, *v1.CreateFriendshipRequest)
}

func DispatchFriendsService(conn *Conn, svc FriendsService, token uint32, method uint32, data []byte) error {
	switch method {
	case 1:
		var args v1.SubscribeRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.Subscribe(conn, token, &args)
	case 2:
		var args v1.SendInvitationRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.SendInvitation(conn, token, &args)
	case 3:
		var args v1.AcceptInvitationRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.AcceptInvitation(conn, token, &args)
	case 4:
		var args v1.RevokeInvitationRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.RevokeInvitation(conn, token, &args)
	case 5:
		var args v1.DeclineInvitationRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.DeclineInvitation(conn, token, &args)
	case 6:
		var args v1.IgnoreInvitationRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.IgnoreInvitation(conn, token, &args)
	case 8:
		var args v1.RemoveFriendRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.RemoveFriend(conn, token, &args)
	case 9:
		var args v1.ViewFriendsRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.ViewFriends(conn, token, &args)
	case 10:
		var args v1.UpdateFriendStateRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.UpdateFriendState(conn, token, &args)
	case 11:
		var args v1.UnsubscribeRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.Unsubscribe(conn, token, &args)
	case 12:
		var args v1.RevokeAllInvitationsRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.RevokeAllInvitations(conn, token, &args)
	case 13:
		var args v1.GetFriendListRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.GetFriendList(conn, token, &args)
	case 14:
		var args v1.CreateFriendshipRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.CreateFriendship(conn, token, &args)
	}
	return nil
}

type EmptyFriendsService struct{}

func (e EmptyFriendsService) Subscribe(conn *Conn, token uint32, args *v1.SubscribeRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyFriendsService) SendInvitation(conn *Conn, token uint32, args *v1.SendInvitationRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyFriendsService) AcceptInvitation(conn *Conn, token uint32, args *v1.AcceptInvitationRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyFriendsService) RevokeInvitation(conn *Conn, token uint32, args *v1.RevokeInvitationRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyFriendsService) DeclineInvitation(conn *Conn, token uint32, args *v1.DeclineInvitationRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyFriendsService) IgnoreInvitation(conn *Conn, token uint32, args *v1.IgnoreInvitationRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyFriendsService) RemoveFriend(conn *Conn, token uint32, args *v1.RemoveFriendRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyFriendsService) ViewFriends(conn *Conn, token uint32, args *v1.ViewFriendsRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyFriendsService) UpdateFriendState(conn *Conn, token uint32, args *v1.UpdateFriendStateRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyFriendsService) Unsubscribe(conn *Conn, token uint32, args *v1.UnsubscribeRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyFriendsService) RevokeAllInvitations(conn *Conn, token uint32, args *v1.RevokeAllInvitationsRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyFriendsService) GetFriendList(conn *Conn, token uint32, args *v1.GetFriendListRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyFriendsService) CreateFriendship(conn *Conn, token uint32, args *v1.CreateFriendshipRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}

func (c *Conn) FriendsService_Request_Subscribe(args *v1.SubscribeRequest) (*v1.SubscribeResponse, error) {
	header, bytes, err := c.Request(FriendsServiceHash, 1, args)
	if err != nil {
		return nil, err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return nil, fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	var out v1.SubscribeResponse
	err = proto.Unmarshal(bytes, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Conn) FriendsService_Request_SendInvitation(args *v1.SendInvitationRequest) error {
	header, _, err := c.Request(FriendsServiceHash, 2, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) FriendsService_Request_AcceptInvitation(args *v1.AcceptInvitationRequest) error {
	header, _, err := c.Request(FriendsServiceHash, 3, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) FriendsService_Request_RevokeInvitation(args *v1.RevokeInvitationRequest) error {
	header, _, err := c.Request(FriendsServiceHash, 4, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) FriendsService_Request_DeclineInvitation(args *v1.DeclineInvitationRequest) error {
	header, _, err := c.Request(FriendsServiceHash, 5, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) FriendsService_Request_IgnoreInvitation(args *v1.IgnoreInvitationRequest) error {
	header, _, err := c.Request(FriendsServiceHash, 6, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) FriendsService_Request_RemoveFriend(args *v1.RemoveFriendRequest) error {
	header, _, err := c.Request(FriendsServiceHash, 8, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) FriendsService_Request_ViewFriends(args *v1.ViewFriendsRequest) (*v1.ViewFriendsResponse, error) {
	header, bytes, err := c.Request(FriendsServiceHash, 9, args)
	if err != nil {
		return nil, err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return nil, fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	var out v1.ViewFriendsResponse
	err = proto.Unmarshal(bytes, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Conn) FriendsService_Request_UpdateFriendState(args *v1.UpdateFriendStateRequest) error {
	header, _, err := c.Request(FriendsServiceHash, 10, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) FriendsService_Request_Unsubscribe(args *v1.UnsubscribeRequest) error {
	header, _, err := c.Request(FriendsServiceHash, 11, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) FriendsService_Request_RevokeAllInvitations(args *v1.RevokeAllInvitationsRequest) error {
	header, _, err := c.Request(FriendsServiceHash, 12, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) FriendsService_Request_GetFriendList(args *v1.GetFriendListRequest) (*v1.GetFriendListResponse, error) {
	header, bytes, err := c.Request(FriendsServiceHash, 13, args)
	if err != nil {
		return nil, err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return nil, fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	var out v1.GetFriendListResponse
	err = proto.Unmarshal(bytes, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Conn) FriendsService_Request_CreateFriendship(args *v1.CreateFriendshipRequest) error {
	header, _, err := c.Request(FriendsServiceHash, 14, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

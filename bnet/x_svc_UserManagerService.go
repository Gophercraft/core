// generated by protoc-gen-gcraft : DO NOT EDIT
package bnet

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	protocol "github.com/Gophercraft/core/bnet/bgs/protocol"
	v1 "github.com/Gophercraft/core/bnet/bgs/protocol/user_manager/v1"
	math "math"
)

// shut the compiler up
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = protocol.E_MethodOptions

const UserManagerServiceHash = 0x3E19268A

type UserManagerService interface {
	Subscribe(*Conn, uint32, *v1.SubscribeRequest)
	AddRecentPlayers(*Conn, uint32, *v1.AddRecentPlayersRequest)
	ClearRecentPlayers(*Conn, uint32, *v1.ClearRecentPlayersRequest)
	BlockPlayer(*Conn, uint32, *v1.BlockPlayerRequest)
	UnblockPlayer(*Conn, uint32, *v1.UnblockPlayerRequest)
	BlockPlayerForSession(*Conn, uint32, *v1.BlockPlayerRequest)
	Unsubscribe(*Conn, uint32, *v1.UnsubscribeRequest)
}

func DispatchUserManagerService(conn *Conn, svc UserManagerService, token uint32, method uint32, data []byte) error {
	switch method {
	case 1:
		var args v1.SubscribeRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.Subscribe(conn, token, &args)
	case 10:
		var args v1.AddRecentPlayersRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.AddRecentPlayers(conn, token, &args)
	case 11:
		var args v1.ClearRecentPlayersRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.ClearRecentPlayers(conn, token, &args)
	case 20:
		var args v1.BlockPlayerRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.BlockPlayer(conn, token, &args)
	case 21:
		var args v1.UnblockPlayerRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.UnblockPlayer(conn, token, &args)
	case 40:
		var args v1.BlockPlayerRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.BlockPlayerForSession(conn, token, &args)
	case 51:
		var args v1.UnsubscribeRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.Unsubscribe(conn, token, &args)
	}
	return nil
}

type EmptyUserManagerService struct{}

func (e EmptyUserManagerService) Subscribe(conn *Conn, token uint32, args *v1.SubscribeRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyUserManagerService) AddRecentPlayers(conn *Conn, token uint32, args *v1.AddRecentPlayersRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyUserManagerService) ClearRecentPlayers(conn *Conn, token uint32, args *v1.ClearRecentPlayersRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyUserManagerService) BlockPlayer(conn *Conn, token uint32, args *v1.BlockPlayerRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyUserManagerService) UnblockPlayer(conn *Conn, token uint32, args *v1.UnblockPlayerRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyUserManagerService) BlockPlayerForSession(conn *Conn, token uint32, args *v1.BlockPlayerRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyUserManagerService) Unsubscribe(conn *Conn, token uint32, args *v1.UnsubscribeRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}

func (c *Conn) UserManagerService_Request_Subscribe(args *v1.SubscribeRequest) (*v1.SubscribeResponse, error) {
	header, bytes, err := c.Request(UserManagerServiceHash, 1, args)
	if err != nil {
		return nil, err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return nil, fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	var out v1.SubscribeResponse
	err = proto.Unmarshal(bytes, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Conn) UserManagerService_Request_AddRecentPlayers(args *v1.AddRecentPlayersRequest) error {
	header, _, err := c.Request(UserManagerServiceHash, 10, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) UserManagerService_Request_ClearRecentPlayers(args *v1.ClearRecentPlayersRequest) error {
	header, _, err := c.Request(UserManagerServiceHash, 11, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) UserManagerService_Request_BlockPlayer(args *v1.BlockPlayerRequest) error {
	header, _, err := c.Request(UserManagerServiceHash, 20, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) UserManagerService_Request_UnblockPlayer(args *v1.UnblockPlayerRequest) error {
	header, _, err := c.Request(UserManagerServiceHash, 21, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) UserManagerService_Request_BlockPlayerForSession(args *v1.BlockPlayerRequest) error {
	header, _, err := c.Request(UserManagerServiceHash, 40, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) UserManagerService_Request_Unsubscribe(args *v1.UnsubscribeRequest) error {
	header, _, err := c.Request(UserManagerServiceHash, 51, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

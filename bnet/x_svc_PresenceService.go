// generated by protoc-gen-gcraft : DO NOT EDIT
package bnet

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	protocol "github.com/Gophercraft/core/bnet/bgs/protocol"
	v1 "github.com/Gophercraft/core/bnet/bgs/protocol/presence/v1"
	math "math"
)

// shut the compiler up
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = protocol.E_MethodOptions

const PresenceServiceHash = 0xFA0796FF

type PresenceService interface {
	Subscribe(*Conn, uint32, *v1.SubscribeRequest)
	Unsubscribe(*Conn, uint32, *v1.UnsubscribeRequest)
	Update(*Conn, uint32, *v1.UpdateRequest)
	Query(*Conn, uint32, *v1.QueryRequest)
	BatchSubscribe(*Conn, uint32, *v1.BatchSubscribeRequest)
	BatchUnsubscribe(*Conn, uint32, *v1.BatchUnsubscribeRequest)
}

func DispatchPresenceService(conn *Conn, svc PresenceService, token uint32, method uint32, data []byte) error {
	switch method {
	case 1:
		var args v1.SubscribeRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.Subscribe(conn, token, &args)
	case 2:
		var args v1.UnsubscribeRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.Unsubscribe(conn, token, &args)
	case 3:
		var args v1.UpdateRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.Update(conn, token, &args)
	case 4:
		var args v1.QueryRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.Query(conn, token, &args)
	case 8:
		var args v1.BatchSubscribeRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.BatchSubscribe(conn, token, &args)
	case 9:
		var args v1.BatchUnsubscribeRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.BatchUnsubscribe(conn, token, &args)
	}
	return nil
}

type EmptyPresenceService struct{}

func (e EmptyPresenceService) Subscribe(conn *Conn, token uint32, args *v1.SubscribeRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyPresenceService) Unsubscribe(conn *Conn, token uint32, args *v1.UnsubscribeRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyPresenceService) Update(conn *Conn, token uint32, args *v1.UpdateRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyPresenceService) Query(conn *Conn, token uint32, args *v1.QueryRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyPresenceService) BatchSubscribe(conn *Conn, token uint32, args *v1.BatchSubscribeRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyPresenceService) BatchUnsubscribe(conn *Conn, token uint32, args *v1.BatchUnsubscribeRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}

func (c *Conn) PresenceService_Request_Subscribe(args *v1.SubscribeRequest) error {
	header, _, err := c.Request(PresenceServiceHash, 1, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) PresenceService_Request_Unsubscribe(args *v1.UnsubscribeRequest) error {
	header, _, err := c.Request(PresenceServiceHash, 2, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) PresenceService_Request_Update(args *v1.UpdateRequest) error {
	header, _, err := c.Request(PresenceServiceHash, 3, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) PresenceService_Request_Query(args *v1.QueryRequest) (*v1.QueryResponse, error) {
	header, bytes, err := c.Request(PresenceServiceHash, 4, args)
	if err != nil {
		return nil, err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return nil, fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	var out v1.QueryResponse
	err = proto.Unmarshal(bytes, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Conn) PresenceService_Request_BatchSubscribe(args *v1.BatchSubscribeRequest) (*v1.BatchSubscribeResponse, error) {
	header, bytes, err := c.Request(PresenceServiceHash, 8, args)
	if err != nil {
		return nil, err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return nil, fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	var out v1.BatchSubscribeResponse
	err = proto.Unmarshal(bytes, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Conn) PresenceService_Request_BatchUnsubscribe(args *v1.BatchUnsubscribeRequest) error {
	header, _, err := c.Request(PresenceServiceHash, 9, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

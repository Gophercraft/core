// DO NOT EDIT: this file was auto-generated by Gophercraft/protoss

// Code generated by protoc-gen-go-bnet. DO NOT EDIT.
// versions:
// - protoc-gen-go-bnet v1.3.0
// - protoc             v4.25.2
// source: bgs/low/pb/client/friends_service.proto

package v1

import (
	context "context"
	protocol "github.com/Gophercraft/core/bnet/pb/bgs/protocol"
	rpc "github.com/Gophercraft/core/bnet/rpc"
	codes "github.com/Gophercraft/core/bnet/rpc/codes"
	status "github.com/Gophercraft/core/bnet/rpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the bnet package it is being compiled against.
const _ = rpc.SupportPackageIsVersion1

const (
	FriendsService_Subscribe_FullMethodName            = "/bgs.protocol.friends.v1.FriendsService/Subscribe"
	FriendsService_SendInvitation_FullMethodName       = "/bgs.protocol.friends.v1.FriendsService/SendInvitation"
	FriendsService_AcceptInvitation_FullMethodName     = "/bgs.protocol.friends.v1.FriendsService/AcceptInvitation"
	FriendsService_RevokeInvitation_FullMethodName     = "/bgs.protocol.friends.v1.FriendsService/RevokeInvitation"
	FriendsService_DeclineInvitation_FullMethodName    = "/bgs.protocol.friends.v1.FriendsService/DeclineInvitation"
	FriendsService_IgnoreInvitation_FullMethodName     = "/bgs.protocol.friends.v1.FriendsService/IgnoreInvitation"
	FriendsService_RemoveFriend_FullMethodName         = "/bgs.protocol.friends.v1.FriendsService/RemoveFriend"
	FriendsService_ViewFriends_FullMethodName          = "/bgs.protocol.friends.v1.FriendsService/ViewFriends"
	FriendsService_UpdateFriendState_FullMethodName    = "/bgs.protocol.friends.v1.FriendsService/UpdateFriendState"
	FriendsService_Unsubscribe_FullMethodName          = "/bgs.protocol.friends.v1.FriendsService/Unsubscribe"
	FriendsService_RevokeAllInvitations_FullMethodName = "/bgs.protocol.friends.v1.FriendsService/RevokeAllInvitations"
	FriendsService_GetFriendList_FullMethodName        = "/bgs.protocol.friends.v1.FriendsService/GetFriendList"
	FriendsService_CreateFriendship_FullMethodName     = "/bgs.protocol.friends.v1.FriendsService/CreateFriendship"
)

// FriendsServiceClient is the client API for FriendsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendsServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...rpc.CallOption) (*SubscribeResponse, error)
	SendInvitation(ctx context.Context, in *SendInvitationRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	RevokeInvitation(ctx context.Context, in *RevokeInvitationRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	DeclineInvitation(ctx context.Context, in *DeclineInvitationRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	IgnoreInvitation(ctx context.Context, in *IgnoreInvitationRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	ViewFriends(ctx context.Context, in *ViewFriendsRequest, opts ...rpc.CallOption) (*ViewFriendsResponse, error)
	UpdateFriendState(ctx context.Context, in *UpdateFriendStateRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	RevokeAllInvitations(ctx context.Context, in *RevokeAllInvitationsRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...rpc.CallOption) (*GetFriendListResponse, error)
	CreateFriendship(ctx context.Context, in *CreateFriendshipRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
}

type friendsServiceClient struct {
	cc rpc.ClientConnectionInterface
}

func NewFriendsServiceClient(cc rpc.ClientConnectionInterface) FriendsServiceClient {
	return &friendsServiceClient{cc}
}

func (c *friendsServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...rpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, FriendsService_Subscribe_FullMethodName, 0xA3DDB1BD, 1, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) SendInvitation(ctx context.Context, in *SendInvitationRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, FriendsService_SendInvitation_FullMethodName, 0xA3DDB1BD, 2, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, FriendsService_AcceptInvitation_FullMethodName, 0xA3DDB1BD, 3, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) RevokeInvitation(ctx context.Context, in *RevokeInvitationRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, FriendsService_RevokeInvitation_FullMethodName, 0xA3DDB1BD, 4, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) DeclineInvitation(ctx context.Context, in *DeclineInvitationRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, FriendsService_DeclineInvitation_FullMethodName, 0xA3DDB1BD, 5, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) IgnoreInvitation(ctx context.Context, in *IgnoreInvitationRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, FriendsService_IgnoreInvitation_FullMethodName, 0xA3DDB1BD, 6, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, FriendsService_RemoveFriend_FullMethodName, 0xA3DDB1BD, 8, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) ViewFriends(ctx context.Context, in *ViewFriendsRequest, opts ...rpc.CallOption) (*ViewFriendsResponse, error) {
	out := new(ViewFriendsResponse)
	err := c.cc.Invoke(ctx, FriendsService_ViewFriends_FullMethodName, 0xA3DDB1BD, 9, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) UpdateFriendState(ctx context.Context, in *UpdateFriendStateRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, FriendsService_UpdateFriendState_FullMethodName, 0xA3DDB1BD, 10, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, FriendsService_Unsubscribe_FullMethodName, 0xA3DDB1BD, 11, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) RevokeAllInvitations(ctx context.Context, in *RevokeAllInvitationsRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, FriendsService_RevokeAllInvitations_FullMethodName, 0xA3DDB1BD, 12, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...rpc.CallOption) (*GetFriendListResponse, error) {
	out := new(GetFriendListResponse)
	err := c.cc.Invoke(ctx, FriendsService_GetFriendList_FullMethodName, 0xA3DDB1BD, 13, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) CreateFriendship(ctx context.Context, in *CreateFriendshipRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, FriendsService_CreateFriendship_FullMethodName, 0xA3DDB1BD, 14, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendsServiceServer is the server API for FriendsService service.
// All implementations must embed UnimplementedFriendsServiceServer
// for forward compatibility
type FriendsServiceServer interface {
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	SendInvitation(context.Context, *SendInvitationRequest) (*protocol.NoData, error)
	AcceptInvitation(context.Context, *AcceptInvitationRequest) (*protocol.NoData, error)
	RevokeInvitation(context.Context, *RevokeInvitationRequest) (*protocol.NoData, error)
	DeclineInvitation(context.Context, *DeclineInvitationRequest) (*protocol.NoData, error)
	IgnoreInvitation(context.Context, *IgnoreInvitationRequest) (*protocol.NoData, error)
	RemoveFriend(context.Context, *RemoveFriendRequest) (*protocol.NoData, error)
	ViewFriends(context.Context, *ViewFriendsRequest) (*ViewFriendsResponse, error)
	UpdateFriendState(context.Context, *UpdateFriendStateRequest) (*protocol.NoData, error)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*protocol.NoData, error)
	RevokeAllInvitations(context.Context, *RevokeAllInvitationsRequest) (*protocol.NoData, error)
	GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error)
	CreateFriendship(context.Context, *CreateFriendshipRequest) (*protocol.NoData, error)
	mustEmbedUnimplementedFriendsServiceServer()
}

// UnimplementedFriendsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFriendsServiceServer struct {
}

func (UnimplementedFriendsServiceServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Subscribe not implemented")
}
func (UnimplementedFriendsServiceServer) SendInvitation(context.Context, *SendInvitationRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method SendInvitation not implemented")
}
func (UnimplementedFriendsServiceServer) AcceptInvitation(context.Context, *AcceptInvitationRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method AcceptInvitation not implemented")
}
func (UnimplementedFriendsServiceServer) RevokeInvitation(context.Context, *RevokeInvitationRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method RevokeInvitation not implemented")
}
func (UnimplementedFriendsServiceServer) DeclineInvitation(context.Context, *DeclineInvitationRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method DeclineInvitation not implemented")
}
func (UnimplementedFriendsServiceServer) IgnoreInvitation(context.Context, *IgnoreInvitationRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method IgnoreInvitation not implemented")
}
func (UnimplementedFriendsServiceServer) RemoveFriend(context.Context, *RemoveFriendRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method RemoveFriend not implemented")
}
func (UnimplementedFriendsServiceServer) ViewFriends(context.Context, *ViewFriendsRequest) (*ViewFriendsResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method ViewFriends not implemented")
}
func (UnimplementedFriendsServiceServer) UpdateFriendState(context.Context, *UpdateFriendStateRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method UpdateFriendState not implemented")
}
func (UnimplementedFriendsServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Unsubscribe not implemented")
}
func (UnimplementedFriendsServiceServer) RevokeAllInvitations(context.Context, *RevokeAllInvitationsRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method RevokeAllInvitations not implemented")
}
func (UnimplementedFriendsServiceServer) GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetFriendList not implemented")
}
func (UnimplementedFriendsServiceServer) CreateFriendship(context.Context, *CreateFriendshipRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method CreateFriendship not implemented")
}
func (UnimplementedFriendsServiceServer) mustEmbedUnimplementedFriendsServiceServer() {}

// UnsafeFriendsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendsServiceServer will
// result in compilation errors.
type UnsafeFriendsServiceServer interface {
	mustEmbedUnimplementedFriendsServiceServer()
}

func RegisterFriendsServiceServer(s rpc.ServiceRegistrar, srv FriendsServiceServer) {
	s.RegisterService(&FriendsService_ServiceDesc, srv)
}

func _FriendsService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).Subscribe(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_SendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).SendInvitation(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsService_SendInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).SendInvitation(ctx, req.(*SendInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).AcceptInvitation(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsService_AcceptInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).AcceptInvitation(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_RevokeInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).RevokeInvitation(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsService_RevokeInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).RevokeInvitation(ctx, req.(*RevokeInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_DeclineInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).DeclineInvitation(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsService_DeclineInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).DeclineInvitation(ctx, req.(*DeclineInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_IgnoreInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IgnoreInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).IgnoreInvitation(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsService_IgnoreInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).IgnoreInvitation(ctx, req.(*IgnoreInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_RemoveFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).RemoveFriend(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsService_RemoveFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).RemoveFriend(ctx, req.(*RemoveFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_ViewFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).ViewFriends(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsService_ViewFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).ViewFriends(ctx, req.(*ViewFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_UpdateFriendState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFriendStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).UpdateFriendState(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsService_UpdateFriendState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).UpdateFriendState(ctx, req.(*UpdateFriendStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).Unsubscribe(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_RevokeAllInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAllInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).RevokeAllInvitations(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsService_RevokeAllInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).RevokeAllInvitations(ctx, req.(*RevokeAllInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).GetFriendList(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsService_GetFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).GetFriendList(ctx, req.(*GetFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_CreateFriendship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFriendshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).CreateFriendship(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsService_CreateFriendship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).CreateFriendship(ctx, req.(*CreateFriendshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendsService_ServiceDesc is the rpc.ServiceDesc for FriendsService service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendsService_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0xA3DDB1BD,
	ServiceName: "bgs.protocol.friends.v1.FriendsService",
	HandlerType: (*FriendsServiceServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "Subscribe",
			MethodId:   1,
			NoResponse: false,
			Handler:    _FriendsService_Subscribe_Handler,
		},
		{
			MethodName: "SendInvitation",
			MethodId:   2,
			NoResponse: false,
			Handler:    _FriendsService_SendInvitation_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			MethodId:   3,
			NoResponse: false,
			Handler:    _FriendsService_AcceptInvitation_Handler,
		},
		{
			MethodName: "RevokeInvitation",
			MethodId:   4,
			NoResponse: false,
			Handler:    _FriendsService_RevokeInvitation_Handler,
		},
		{
			MethodName: "DeclineInvitation",
			MethodId:   5,
			NoResponse: false,
			Handler:    _FriendsService_DeclineInvitation_Handler,
		},
		{
			MethodName: "IgnoreInvitation",
			MethodId:   6,
			NoResponse: false,
			Handler:    _FriendsService_IgnoreInvitation_Handler,
		},
		{
			MethodName: "RemoveFriend",
			MethodId:   8,
			NoResponse: false,
			Handler:    _FriendsService_RemoveFriend_Handler,
		},
		{
			MethodName: "ViewFriends",
			MethodId:   9,
			NoResponse: false,
			Handler:    _FriendsService_ViewFriends_Handler,
		},
		{
			MethodName: "UpdateFriendState",
			MethodId:   10,
			NoResponse: false,
			Handler:    _FriendsService_UpdateFriendState_Handler,
		},
		{
			MethodName: "Unsubscribe",
			MethodId:   11,
			NoResponse: false,
			Handler:    _FriendsService_Unsubscribe_Handler,
		},
		{
			MethodName: "RevokeAllInvitations",
			MethodId:   12,
			NoResponse: false,
			Handler:    _FriendsService_RevokeAllInvitations_Handler,
		},
		{
			MethodName: "GetFriendList",
			MethodId:   13,
			NoResponse: false,
			Handler:    _FriendsService_GetFriendList_Handler,
		},
		{
			MethodName: "CreateFriendship",
			MethodId:   14,
			NoResponse: false,
			Handler:    _FriendsService_CreateFriendship_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/friends_service.proto",
}

const (
	FriendsListener_OnFriendAdded_FullMethodName               = "/bgs.protocol.friends.v1.FriendsListener/OnFriendAdded"
	FriendsListener_OnFriendRemoved_FullMethodName             = "/bgs.protocol.friends.v1.FriendsListener/OnFriendRemoved"
	FriendsListener_OnReceivedInvitationAdded_FullMethodName   = "/bgs.protocol.friends.v1.FriendsListener/OnReceivedInvitationAdded"
	FriendsListener_OnReceivedInvitationRemoved_FullMethodName = "/bgs.protocol.friends.v1.FriendsListener/OnReceivedInvitationRemoved"
	FriendsListener_OnSentInvitationAdded_FullMethodName       = "/bgs.protocol.friends.v1.FriendsListener/OnSentInvitationAdded"
	FriendsListener_OnSentInvitationRemoved_FullMethodName     = "/bgs.protocol.friends.v1.FriendsListener/OnSentInvitationRemoved"
	FriendsListener_OnUpdateFriendState_FullMethodName         = "/bgs.protocol.friends.v1.FriendsListener/OnUpdateFriendState"
)

// FriendsListenerClient is the client API for FriendsListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendsListenerClient interface {
	OnFriendAdded(ctx context.Context, in *FriendNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnFriendRemoved(ctx context.Context, in *FriendNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnReceivedInvitationAdded(ctx context.Context, in *InvitationNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnReceivedInvitationRemoved(ctx context.Context, in *InvitationNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnSentInvitationAdded(ctx context.Context, in *SentInvitationAddedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnSentInvitationRemoved(ctx context.Context, in *SentInvitationRemovedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnUpdateFriendState(ctx context.Context, in *UpdateFriendStateNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
}

type friendsListenerClient struct {
	cc rpc.ClientConnectionInterface
}

func NewFriendsListenerClient(cc rpc.ClientConnectionInterface) FriendsListenerClient {
	return &friendsListenerClient{cc}
}

func (c *friendsListenerClient) OnFriendAdded(ctx context.Context, in *FriendNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, FriendsListener_OnFriendAdded_FullMethodName, 0x6F259A13, 1, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsListenerClient) OnFriendRemoved(ctx context.Context, in *FriendNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, FriendsListener_OnFriendRemoved_FullMethodName, 0x6F259A13, 2, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsListenerClient) OnReceivedInvitationAdded(ctx context.Context, in *InvitationNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, FriendsListener_OnReceivedInvitationAdded_FullMethodName, 0x6F259A13, 3, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsListenerClient) OnReceivedInvitationRemoved(ctx context.Context, in *InvitationNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, FriendsListener_OnReceivedInvitationRemoved_FullMethodName, 0x6F259A13, 4, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsListenerClient) OnSentInvitationAdded(ctx context.Context, in *SentInvitationAddedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, FriendsListener_OnSentInvitationAdded_FullMethodName, 0x6F259A13, 5, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsListenerClient) OnSentInvitationRemoved(ctx context.Context, in *SentInvitationRemovedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, FriendsListener_OnSentInvitationRemoved_FullMethodName, 0x6F259A13, 6, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsListenerClient) OnUpdateFriendState(ctx context.Context, in *UpdateFriendStateNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, FriendsListener_OnUpdateFriendState_FullMethodName, 0x6F259A13, 7, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendsListenerServer is the server API for FriendsListener service.
// All implementations must embed UnimplementedFriendsListenerServer
// for forward compatibility
type FriendsListenerServer interface {
	OnFriendAdded(context.Context, *FriendNotification) (*protocol.NO_RESPONSE, error)
	OnFriendRemoved(context.Context, *FriendNotification) (*protocol.NO_RESPONSE, error)
	OnReceivedInvitationAdded(context.Context, *InvitationNotification) (*protocol.NO_RESPONSE, error)
	OnReceivedInvitationRemoved(context.Context, *InvitationNotification) (*protocol.NO_RESPONSE, error)
	OnSentInvitationAdded(context.Context, *SentInvitationAddedNotification) (*protocol.NO_RESPONSE, error)
	OnSentInvitationRemoved(context.Context, *SentInvitationRemovedNotification) (*protocol.NO_RESPONSE, error)
	OnUpdateFriendState(context.Context, *UpdateFriendStateNotification) (*protocol.NO_RESPONSE, error)
	mustEmbedUnimplementedFriendsListenerServer()
}

// UnimplementedFriendsListenerServer must be embedded to have forward compatible implementations.
type UnimplementedFriendsListenerServer struct {
}

func (UnimplementedFriendsListenerServer) OnFriendAdded(context.Context, *FriendNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnFriendAdded not implemented")
}
func (UnimplementedFriendsListenerServer) OnFriendRemoved(context.Context, *FriendNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnFriendRemoved not implemented")
}
func (UnimplementedFriendsListenerServer) OnReceivedInvitationAdded(context.Context, *InvitationNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnReceivedInvitationAdded not implemented")
}
func (UnimplementedFriendsListenerServer) OnReceivedInvitationRemoved(context.Context, *InvitationNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnReceivedInvitationRemoved not implemented")
}
func (UnimplementedFriendsListenerServer) OnSentInvitationAdded(context.Context, *SentInvitationAddedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnSentInvitationAdded not implemented")
}
func (UnimplementedFriendsListenerServer) OnSentInvitationRemoved(context.Context, *SentInvitationRemovedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnSentInvitationRemoved not implemented")
}
func (UnimplementedFriendsListenerServer) OnUpdateFriendState(context.Context, *UpdateFriendStateNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnUpdateFriendState not implemented")
}
func (UnimplementedFriendsListenerServer) mustEmbedUnimplementedFriendsListenerServer() {}

// UnsafeFriendsListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendsListenerServer will
// result in compilation errors.
type UnsafeFriendsListenerServer interface {
	mustEmbedUnimplementedFriendsListenerServer()
}

func RegisterFriendsListenerServer(s rpc.ServiceRegistrar, srv FriendsListenerServer) {
	s.RegisterService(&FriendsListener_ServiceDesc, srv)
}

func _FriendsListener_OnFriendAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsListenerServer).OnFriendAdded(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsListener_OnFriendAdded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsListenerServer).OnFriendAdded(ctx, req.(*FriendNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsListener_OnFriendRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsListenerServer).OnFriendRemoved(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsListener_OnFriendRemoved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsListenerServer).OnFriendRemoved(ctx, req.(*FriendNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsListener_OnReceivedInvitationAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvitationNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsListenerServer).OnReceivedInvitationAdded(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsListener_OnReceivedInvitationAdded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsListenerServer).OnReceivedInvitationAdded(ctx, req.(*InvitationNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsListener_OnReceivedInvitationRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvitationNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsListenerServer).OnReceivedInvitationRemoved(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsListener_OnReceivedInvitationRemoved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsListenerServer).OnReceivedInvitationRemoved(ctx, req.(*InvitationNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsListener_OnSentInvitationAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentInvitationAddedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsListenerServer).OnSentInvitationAdded(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsListener_OnSentInvitationAdded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsListenerServer).OnSentInvitationAdded(ctx, req.(*SentInvitationAddedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsListener_OnSentInvitationRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentInvitationRemovedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsListenerServer).OnSentInvitationRemoved(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsListener_OnSentInvitationRemoved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsListenerServer).OnSentInvitationRemoved(ctx, req.(*SentInvitationRemovedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsListener_OnUpdateFriendState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFriendStateNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsListenerServer).OnUpdateFriendState(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsListener_OnUpdateFriendState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsListenerServer).OnUpdateFriendState(ctx, req.(*UpdateFriendStateNotification))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendsListener_ServiceDesc is the rpc.ServiceDesc for FriendsListener service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendsListener_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0x6F259A13,
	ServiceName: "bgs.protocol.friends.v1.FriendsListener",
	HandlerType: (*FriendsListenerServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "OnFriendAdded",
			MethodId:   1,
			NoResponse: true,
			Handler:    _FriendsListener_OnFriendAdded_Handler,
		},
		{
			MethodName: "OnFriendRemoved",
			MethodId:   2,
			NoResponse: true,
			Handler:    _FriendsListener_OnFriendRemoved_Handler,
		},
		{
			MethodName: "OnReceivedInvitationAdded",
			MethodId:   3,
			NoResponse: true,
			Handler:    _FriendsListener_OnReceivedInvitationAdded_Handler,
		},
		{
			MethodName: "OnReceivedInvitationRemoved",
			MethodId:   4,
			NoResponse: true,
			Handler:    _FriendsListener_OnReceivedInvitationRemoved_Handler,
		},
		{
			MethodName: "OnSentInvitationAdded",
			MethodId:   5,
			NoResponse: true,
			Handler:    _FriendsListener_OnSentInvitationAdded_Handler,
		},
		{
			MethodName: "OnSentInvitationRemoved",
			MethodId:   6,
			NoResponse: true,
			Handler:    _FriendsListener_OnSentInvitationRemoved_Handler,
		},
		{
			MethodName: "OnUpdateFriendState",
			MethodId:   7,
			NoResponse: true,
			Handler:    _FriendsListener_OnUpdateFriendState_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/friends_service.proto",
}

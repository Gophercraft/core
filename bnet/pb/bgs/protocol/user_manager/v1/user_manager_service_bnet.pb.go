// DO NOT EDIT: this file was auto-generated by Gophercraft/protoss

// Code generated by protoc-gen-go-bnet. DO NOT EDIT.
// versions:
// - protoc-gen-go-bnet v1.3.0
// - protoc             v4.25.2
// source: bgs/low/pb/client/user_manager_service.proto

package v1

import (
	context "context"
	protocol "github.com/Gophercraft/core/bnet/pb/bgs/protocol"
	rpc "github.com/Gophercraft/core/bnet/rpc"
	codes "github.com/Gophercraft/core/bnet/rpc/codes"
	status "github.com/Gophercraft/core/bnet/rpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the bnet package it is being compiled against.
const _ = rpc.SupportPackageIsVersion1

const (
	UserManagerService_Subscribe_FullMethodName             = "/bgs.protocol.user_manager.v1.UserManagerService/Subscribe"
	UserManagerService_AddRecentPlayers_FullMethodName      = "/bgs.protocol.user_manager.v1.UserManagerService/AddRecentPlayers"
	UserManagerService_ClearRecentPlayers_FullMethodName    = "/bgs.protocol.user_manager.v1.UserManagerService/ClearRecentPlayers"
	UserManagerService_BlockPlayer_FullMethodName           = "/bgs.protocol.user_manager.v1.UserManagerService/BlockPlayer"
	UserManagerService_UnblockPlayer_FullMethodName         = "/bgs.protocol.user_manager.v1.UserManagerService/UnblockPlayer"
	UserManagerService_BlockPlayerForSession_FullMethodName = "/bgs.protocol.user_manager.v1.UserManagerService/BlockPlayerForSession"
	UserManagerService_Unsubscribe_FullMethodName           = "/bgs.protocol.user_manager.v1.UserManagerService/Unsubscribe"
)

// UserManagerServiceClient is the client API for UserManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagerServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...rpc.CallOption) (*SubscribeResponse, error)
	AddRecentPlayers(ctx context.Context, in *AddRecentPlayersRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	ClearRecentPlayers(ctx context.Context, in *ClearRecentPlayersRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	BlockPlayer(ctx context.Context, in *BlockPlayerRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	UnblockPlayer(ctx context.Context, in *UnblockPlayerRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	BlockPlayerForSession(ctx context.Context, in *BlockPlayerRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
}

type userManagerServiceClient struct {
	cc rpc.ClientConnectionInterface
}

func NewUserManagerServiceClient(cc rpc.ClientConnectionInterface) UserManagerServiceClient {
	return &userManagerServiceClient{cc}
}

func (c *userManagerServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...rpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, UserManagerService_Subscribe_FullMethodName, 0x3E19268A, 1, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) AddRecentPlayers(ctx context.Context, in *AddRecentPlayersRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, UserManagerService_AddRecentPlayers_FullMethodName, 0x3E19268A, 10, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) ClearRecentPlayers(ctx context.Context, in *ClearRecentPlayersRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, UserManagerService_ClearRecentPlayers_FullMethodName, 0x3E19268A, 11, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) BlockPlayer(ctx context.Context, in *BlockPlayerRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, UserManagerService_BlockPlayer_FullMethodName, 0x3E19268A, 20, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) UnblockPlayer(ctx context.Context, in *UnblockPlayerRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, UserManagerService_UnblockPlayer_FullMethodName, 0x3E19268A, 21, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) BlockPlayerForSession(ctx context.Context, in *BlockPlayerRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, UserManagerService_BlockPlayerForSession_FullMethodName, 0x3E19268A, 40, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, UserManagerService_Unsubscribe_FullMethodName, 0x3E19268A, 51, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerServiceServer is the server API for UserManagerService service.
// All implementations must embed UnimplementedUserManagerServiceServer
// for forward compatibility
type UserManagerServiceServer interface {
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	AddRecentPlayers(context.Context, *AddRecentPlayersRequest) (*protocol.NoData, error)
	ClearRecentPlayers(context.Context, *ClearRecentPlayersRequest) (*protocol.NoData, error)
	BlockPlayer(context.Context, *BlockPlayerRequest) (*protocol.NoData, error)
	UnblockPlayer(context.Context, *UnblockPlayerRequest) (*protocol.NoData, error)
	BlockPlayerForSession(context.Context, *BlockPlayerRequest) (*protocol.NoData, error)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*protocol.NoData, error)
	mustEmbedUnimplementedUserManagerServiceServer()
}

// UnimplementedUserManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagerServiceServer struct {
}

func (UnimplementedUserManagerServiceServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Subscribe not implemented")
}
func (UnimplementedUserManagerServiceServer) AddRecentPlayers(context.Context, *AddRecentPlayersRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method AddRecentPlayers not implemented")
}
func (UnimplementedUserManagerServiceServer) ClearRecentPlayers(context.Context, *ClearRecentPlayersRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method ClearRecentPlayers not implemented")
}
func (UnimplementedUserManagerServiceServer) BlockPlayer(context.Context, *BlockPlayerRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method BlockPlayer not implemented")
}
func (UnimplementedUserManagerServiceServer) UnblockPlayer(context.Context, *UnblockPlayerRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method UnblockPlayer not implemented")
}
func (UnimplementedUserManagerServiceServer) BlockPlayerForSession(context.Context, *BlockPlayerRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method BlockPlayerForSession not implemented")
}
func (UnimplementedUserManagerServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Unsubscribe not implemented")
}
func (UnimplementedUserManagerServiceServer) mustEmbedUnimplementedUserManagerServiceServer() {}

// UnsafeUserManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerServiceServer will
// result in compilation errors.
type UnsafeUserManagerServiceServer interface {
	mustEmbedUnimplementedUserManagerServiceServer()
}

func RegisterUserManagerServiceServer(s rpc.ServiceRegistrar, srv UserManagerServiceServer) {
	s.RegisterService(&UserManagerService_ServiceDesc, srv)
}

func _UserManagerService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).Subscribe(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_AddRecentPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecentPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).AddRecentPlayers(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_AddRecentPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).AddRecentPlayers(ctx, req.(*AddRecentPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_ClearRecentPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRecentPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).ClearRecentPlayers(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_ClearRecentPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).ClearRecentPlayers(ctx, req.(*ClearRecentPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_BlockPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).BlockPlayer(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_BlockPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).BlockPlayer(ctx, req.(*BlockPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_UnblockPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).UnblockPlayer(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_UnblockPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).UnblockPlayer(ctx, req.(*UnblockPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_BlockPlayerForSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).BlockPlayerForSession(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_BlockPlayerForSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).BlockPlayerForSession(ctx, req.(*BlockPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).Unsubscribe(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManagerService_ServiceDesc is the rpc.ServiceDesc for UserManagerService service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagerService_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0x3E19268A,
	ServiceName: "bgs.protocol.user_manager.v1.UserManagerService",
	HandlerType: (*UserManagerServiceServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "Subscribe",
			MethodId:   1,
			NoResponse: false,
			Handler:    _UserManagerService_Subscribe_Handler,
		},
		{
			MethodName: "AddRecentPlayers",
			MethodId:   10,
			NoResponse: false,
			Handler:    _UserManagerService_AddRecentPlayers_Handler,
		},
		{
			MethodName: "ClearRecentPlayers",
			MethodId:   11,
			NoResponse: false,
			Handler:    _UserManagerService_ClearRecentPlayers_Handler,
		},
		{
			MethodName: "BlockPlayer",
			MethodId:   20,
			NoResponse: false,
			Handler:    _UserManagerService_BlockPlayer_Handler,
		},
		{
			MethodName: "UnblockPlayer",
			MethodId:   21,
			NoResponse: false,
			Handler:    _UserManagerService_UnblockPlayer_Handler,
		},
		{
			MethodName: "BlockPlayerForSession",
			MethodId:   40,
			NoResponse: false,
			Handler:    _UserManagerService_BlockPlayerForSession_Handler,
		},
		{
			MethodName: "Unsubscribe",
			MethodId:   51,
			NoResponse: false,
			Handler:    _UserManagerService_Unsubscribe_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/user_manager_service.proto",
}

const (
	UserManagerListener_OnBlockedPlayerAdded_FullMethodName   = "/bgs.protocol.user_manager.v1.UserManagerListener/OnBlockedPlayerAdded"
	UserManagerListener_OnBlockedPlayerRemoved_FullMethodName = "/bgs.protocol.user_manager.v1.UserManagerListener/OnBlockedPlayerRemoved"
	UserManagerListener_OnRecentPlayersAdded_FullMethodName   = "/bgs.protocol.user_manager.v1.UserManagerListener/OnRecentPlayersAdded"
	UserManagerListener_OnRecentPlayersRemoved_FullMethodName = "/bgs.protocol.user_manager.v1.UserManagerListener/OnRecentPlayersRemoved"
)

// UserManagerListenerClient is the client API for UserManagerListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagerListenerClient interface {
	OnBlockedPlayerAdded(ctx context.Context, in *BlockedPlayerAddedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnBlockedPlayerRemoved(ctx context.Context, in *BlockedPlayerRemovedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnRecentPlayersAdded(ctx context.Context, in *RecentPlayersAddedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnRecentPlayersRemoved(ctx context.Context, in *RecentPlayersRemovedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
}

type userManagerListenerClient struct {
	cc rpc.ClientConnectionInterface
}

func NewUserManagerListenerClient(cc rpc.ClientConnectionInterface) UserManagerListenerClient {
	return &userManagerListenerClient{cc}
}

func (c *userManagerListenerClient) OnBlockedPlayerAdded(ctx context.Context, in *BlockedPlayerAddedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, UserManagerListener_OnBlockedPlayerAdded_FullMethodName, 0xBC872C22, 1, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerListenerClient) OnBlockedPlayerRemoved(ctx context.Context, in *BlockedPlayerRemovedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, UserManagerListener_OnBlockedPlayerRemoved_FullMethodName, 0xBC872C22, 2, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerListenerClient) OnRecentPlayersAdded(ctx context.Context, in *RecentPlayersAddedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, UserManagerListener_OnRecentPlayersAdded_FullMethodName, 0xBC872C22, 11, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerListenerClient) OnRecentPlayersRemoved(ctx context.Context, in *RecentPlayersRemovedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, UserManagerListener_OnRecentPlayersRemoved_FullMethodName, 0xBC872C22, 12, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerListenerServer is the server API for UserManagerListener service.
// All implementations must embed UnimplementedUserManagerListenerServer
// for forward compatibility
type UserManagerListenerServer interface {
	OnBlockedPlayerAdded(context.Context, *BlockedPlayerAddedNotification) (*protocol.NO_RESPONSE, error)
	OnBlockedPlayerRemoved(context.Context, *BlockedPlayerRemovedNotification) (*protocol.NO_RESPONSE, error)
	OnRecentPlayersAdded(context.Context, *RecentPlayersAddedNotification) (*protocol.NO_RESPONSE, error)
	OnRecentPlayersRemoved(context.Context, *RecentPlayersRemovedNotification) (*protocol.NO_RESPONSE, error)
	mustEmbedUnimplementedUserManagerListenerServer()
}

// UnimplementedUserManagerListenerServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagerListenerServer struct {
}

func (UnimplementedUserManagerListenerServer) OnBlockedPlayerAdded(context.Context, *BlockedPlayerAddedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnBlockedPlayerAdded not implemented")
}
func (UnimplementedUserManagerListenerServer) OnBlockedPlayerRemoved(context.Context, *BlockedPlayerRemovedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnBlockedPlayerRemoved not implemented")
}
func (UnimplementedUserManagerListenerServer) OnRecentPlayersAdded(context.Context, *RecentPlayersAddedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnRecentPlayersAdded not implemented")
}
func (UnimplementedUserManagerListenerServer) OnRecentPlayersRemoved(context.Context, *RecentPlayersRemovedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnRecentPlayersRemoved not implemented")
}
func (UnimplementedUserManagerListenerServer) mustEmbedUnimplementedUserManagerListenerServer() {}

// UnsafeUserManagerListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerListenerServer will
// result in compilation errors.
type UnsafeUserManagerListenerServer interface {
	mustEmbedUnimplementedUserManagerListenerServer()
}

func RegisterUserManagerListenerServer(s rpc.ServiceRegistrar, srv UserManagerListenerServer) {
	s.RegisterService(&UserManagerListener_ServiceDesc, srv)
}

func _UserManagerListener_OnBlockedPlayerAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockedPlayerAddedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerListenerServer).OnBlockedPlayerAdded(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerListener_OnBlockedPlayerAdded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerListenerServer).OnBlockedPlayerAdded(ctx, req.(*BlockedPlayerAddedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerListener_OnBlockedPlayerRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockedPlayerRemovedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerListenerServer).OnBlockedPlayerRemoved(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerListener_OnBlockedPlayerRemoved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerListenerServer).OnBlockedPlayerRemoved(ctx, req.(*BlockedPlayerRemovedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerListener_OnRecentPlayersAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentPlayersAddedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerListenerServer).OnRecentPlayersAdded(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerListener_OnRecentPlayersAdded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerListenerServer).OnRecentPlayersAdded(ctx, req.(*RecentPlayersAddedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerListener_OnRecentPlayersRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentPlayersRemovedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerListenerServer).OnRecentPlayersRemoved(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerListener_OnRecentPlayersRemoved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerListenerServer).OnRecentPlayersRemoved(ctx, req.(*RecentPlayersRemovedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManagerListener_ServiceDesc is the rpc.ServiceDesc for UserManagerListener service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagerListener_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0xBC872C22,
	ServiceName: "bgs.protocol.user_manager.v1.UserManagerListener",
	HandlerType: (*UserManagerListenerServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "OnBlockedPlayerAdded",
			MethodId:   1,
			NoResponse: true,
			Handler:    _UserManagerListener_OnBlockedPlayerAdded_Handler,
		},
		{
			MethodName: "OnBlockedPlayerRemoved",
			MethodId:   2,
			NoResponse: true,
			Handler:    _UserManagerListener_OnBlockedPlayerRemoved_Handler,
		},
		{
			MethodName: "OnRecentPlayersAdded",
			MethodId:   11,
			NoResponse: true,
			Handler:    _UserManagerListener_OnRecentPlayersAdded_Handler,
		},
		{
			MethodName: "OnRecentPlayersRemoved",
			MethodId:   12,
			NoResponse: true,
			Handler:    _UserManagerListener_OnRecentPlayersRemoved_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/user_manager_service.proto",
}

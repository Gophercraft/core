// DO NOT EDIT: this file was auto-generated by Gophercraft/protoss

// Code generated by protoc-gen-go-bnet. DO NOT EDIT.
// versions:
// - protoc-gen-go-bnet v1.3.0
// - protoc             v4.25.2
// source: bgs/low/pb/client/api/client/v2/report_service.proto

package v2

import (
	context "context"
	protocol "github.com/Gophercraft/core/bnet/pb/bgs/protocol"
	rpc "github.com/Gophercraft/core/bnet/rpc"
	codes "github.com/Gophercraft/core/bnet/rpc/codes"
	status "github.com/Gophercraft/core/bnet/rpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the bnet package it is being compiled against.
const _ = rpc.SupportPackageIsVersion1

const (
	ReportService_SubmitReport_FullMethodName = "/bgs.protocol.report.v2.ReportService/SubmitReport"
)

// ReportServiceClient is the client API for ReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportServiceClient interface {
	SubmitReport(ctx context.Context, in *SubmitReportRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
}

type reportServiceClient struct {
	cc rpc.ClientConnectionInterface
}

func NewReportServiceClient(cc rpc.ClientConnectionInterface) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) SubmitReport(ctx context.Context, in *SubmitReportRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, ReportService_SubmitReport_FullMethodName, 0x3A4218FB, 1, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServiceServer is the server API for ReportService service.
// All implementations must embed UnimplementedReportServiceServer
// for forward compatibility
type ReportServiceServer interface {
	SubmitReport(context.Context, *SubmitReportRequest) (*protocol.NoData, error)
	mustEmbedUnimplementedReportServiceServer()
}

// UnimplementedReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReportServiceServer struct {
}

func (UnimplementedReportServiceServer) SubmitReport(context.Context, *SubmitReportRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method SubmitReport not implemented")
}
func (UnimplementedReportServiceServer) mustEmbedUnimplementedReportServiceServer() {}

// UnsafeReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportServiceServer will
// result in compilation errors.
type UnsafeReportServiceServer interface {
	mustEmbedUnimplementedReportServiceServer()
}

func RegisterReportServiceServer(s rpc.ServiceRegistrar, srv ReportServiceServer) {
	s.RegisterService(&ReportService_ServiceDesc, srv)
}

func _ReportService_SubmitReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).SubmitReport(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_SubmitReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).SubmitReport(ctx, req.(*SubmitReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportService_ServiceDesc is the rpc.ServiceDesc for ReportService service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportService_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0x3A4218FB,
	ServiceName: "bgs.protocol.report.v2.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "SubmitReport",
			MethodId:   1,
			NoResponse: false,
			Handler:    _ReportService_SubmitReport_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/api/client/v2/report_service.proto",
}

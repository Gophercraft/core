// DO NOT EDIT: this file was auto-generated by Gophercraft/protoss

// Code generated by protoc-gen-go-bnet. DO NOT EDIT.
// versions:
// - protoc-gen-go-bnet v1.3.0
// - protoc             v4.25.2
// source: bgs/low/pb/client/account_service.proto

package v1

import (
	context "context"
	protocol "github.com/Gophercraft/core/bnet/pb/bgs/protocol"
	rpc "github.com/Gophercraft/core/bnet/rpc"
	codes "github.com/Gophercraft/core/bnet/rpc/codes"
	status "github.com/Gophercraft/core/bnet/rpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the bnet package it is being compiled against.
const _ = rpc.SupportPackageIsVersion1

const (
	AccountService_ResolveAccount_FullMethodName                 = "/bgs.protocol.account.v1.AccountService/ResolveAccount"
	AccountService_Subscribe_FullMethodName                      = "/bgs.protocol.account.v1.AccountService/Subscribe"
	AccountService_Unsubscribe_FullMethodName                    = "/bgs.protocol.account.v1.AccountService/Unsubscribe"
	AccountService_GetAccountState_FullMethodName                = "/bgs.protocol.account.v1.AccountService/GetAccountState"
	AccountService_GetGameAccountState_FullMethodName            = "/bgs.protocol.account.v1.AccountService/GetGameAccountState"
	AccountService_GetLicenses_FullMethodName                    = "/bgs.protocol.account.v1.AccountService/GetLicenses"
	AccountService_GetGameTimeRemainingInfo_FullMethodName       = "/bgs.protocol.account.v1.AccountService/GetGameTimeRemainingInfo"
	AccountService_GetGameSessionInfo_FullMethodName             = "/bgs.protocol.account.v1.AccountService/GetGameSessionInfo"
	AccountService_GetCAISInfo_FullMethodName                    = "/bgs.protocol.account.v1.AccountService/GetCAISInfo"
	AccountService_GetAuthorizedData_FullMethodName              = "/bgs.protocol.account.v1.AccountService/GetAuthorizedData"
	AccountService_GetSignedAccountState_FullMethodName          = "/bgs.protocol.account.v1.AccountService/GetSignedAccountState"
	AccountService_GetAccountInfo_FullMethodName                 = "/bgs.protocol.account.v1.AccountService/GetAccountInfo"
	AccountService_GetAccountPlatformRestrictions_FullMethodName = "/bgs.protocol.account.v1.AccountService/GetAccountPlatformRestrictions"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	ResolveAccount(ctx context.Context, in *ResolveAccountRequest, opts ...rpc.CallOption) (*ResolveAccountResponse, error)
	Subscribe(ctx context.Context, in *SubscriptionUpdateRequest, opts ...rpc.CallOption) (*SubscriptionUpdateResponse, error)
	Unsubscribe(ctx context.Context, in *SubscriptionUpdateRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...rpc.CallOption) (*GetAccountStateResponse, error)
	GetGameAccountState(ctx context.Context, in *GetGameAccountStateRequest, opts ...rpc.CallOption) (*GetGameAccountStateResponse, error)
	GetLicenses(ctx context.Context, in *GetLicensesRequest, opts ...rpc.CallOption) (*GetLicensesResponse, error)
	GetGameTimeRemainingInfo(ctx context.Context, in *GetGameTimeRemainingInfoRequest, opts ...rpc.CallOption) (*GetGameTimeRemainingInfoResponse, error)
	GetGameSessionInfo(ctx context.Context, in *GetGameSessionInfoRequest, opts ...rpc.CallOption) (*GetGameSessionInfoResponse, error)
	GetCAISInfo(ctx context.Context, in *GetCAISInfoRequest, opts ...rpc.CallOption) (*GetCAISInfoResponse, error)
	GetAuthorizedData(ctx context.Context, in *GetAuthorizedDataRequest, opts ...rpc.CallOption) (*GetAuthorizedDataResponse, error)
	GetSignedAccountState(ctx context.Context, in *GetSignedAccountStateRequest, opts ...rpc.CallOption) (*GetSignedAccountStateResponse, error)
	GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...rpc.CallOption) (*GetAccountInfoResponse, error)
	GetAccountPlatformRestrictions(ctx context.Context, in *GetAccountPlatformRestrictionsRequest, opts ...rpc.CallOption) (*GetAccountPlatformRestrictionsResponse, error)
}

type accountServiceClient struct {
	cc rpc.ClientConnectionInterface
}

func NewAccountServiceClient(cc rpc.ClientConnectionInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) ResolveAccount(ctx context.Context, in *ResolveAccountRequest, opts ...rpc.CallOption) (*ResolveAccountResponse, error) {
	out := new(ResolveAccountResponse)
	err := c.cc.Invoke(ctx, AccountService_ResolveAccount_FullMethodName, 0x62DA0891, 13, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Subscribe(ctx context.Context, in *SubscriptionUpdateRequest, opts ...rpc.CallOption) (*SubscriptionUpdateResponse, error) {
	out := new(SubscriptionUpdateResponse)
	err := c.cc.Invoke(ctx, AccountService_Subscribe_FullMethodName, 0x62DA0891, 25, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Unsubscribe(ctx context.Context, in *SubscriptionUpdateRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, AccountService_Unsubscribe_FullMethodName, 0x62DA0891, 26, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...rpc.CallOption) (*GetAccountStateResponse, error) {
	out := new(GetAccountStateResponse)
	err := c.cc.Invoke(ctx, AccountService_GetAccountState_FullMethodName, 0x62DA0891, 30, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetGameAccountState(ctx context.Context, in *GetGameAccountStateRequest, opts ...rpc.CallOption) (*GetGameAccountStateResponse, error) {
	out := new(GetGameAccountStateResponse)
	err := c.cc.Invoke(ctx, AccountService_GetGameAccountState_FullMethodName, 0x62DA0891, 31, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetLicenses(ctx context.Context, in *GetLicensesRequest, opts ...rpc.CallOption) (*GetLicensesResponse, error) {
	out := new(GetLicensesResponse)
	err := c.cc.Invoke(ctx, AccountService_GetLicenses_FullMethodName, 0x62DA0891, 32, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetGameTimeRemainingInfo(ctx context.Context, in *GetGameTimeRemainingInfoRequest, opts ...rpc.CallOption) (*GetGameTimeRemainingInfoResponse, error) {
	out := new(GetGameTimeRemainingInfoResponse)
	err := c.cc.Invoke(ctx, AccountService_GetGameTimeRemainingInfo_FullMethodName, 0x62DA0891, 33, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetGameSessionInfo(ctx context.Context, in *GetGameSessionInfoRequest, opts ...rpc.CallOption) (*GetGameSessionInfoResponse, error) {
	out := new(GetGameSessionInfoResponse)
	err := c.cc.Invoke(ctx, AccountService_GetGameSessionInfo_FullMethodName, 0x62DA0891, 34, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetCAISInfo(ctx context.Context, in *GetCAISInfoRequest, opts ...rpc.CallOption) (*GetCAISInfoResponse, error) {
	out := new(GetCAISInfoResponse)
	err := c.cc.Invoke(ctx, AccountService_GetCAISInfo_FullMethodName, 0x62DA0891, 35, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAuthorizedData(ctx context.Context, in *GetAuthorizedDataRequest, opts ...rpc.CallOption) (*GetAuthorizedDataResponse, error) {
	out := new(GetAuthorizedDataResponse)
	err := c.cc.Invoke(ctx, AccountService_GetAuthorizedData_FullMethodName, 0x62DA0891, 37, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetSignedAccountState(ctx context.Context, in *GetSignedAccountStateRequest, opts ...rpc.CallOption) (*GetSignedAccountStateResponse, error) {
	out := new(GetSignedAccountStateResponse)
	err := c.cc.Invoke(ctx, AccountService_GetSignedAccountState_FullMethodName, 0x62DA0891, 44, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...rpc.CallOption) (*GetAccountInfoResponse, error) {
	out := new(GetAccountInfoResponse)
	err := c.cc.Invoke(ctx, AccountService_GetAccountInfo_FullMethodName, 0x62DA0891, 45, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountPlatformRestrictions(ctx context.Context, in *GetAccountPlatformRestrictionsRequest, opts ...rpc.CallOption) (*GetAccountPlatformRestrictionsResponse, error) {
	out := new(GetAccountPlatformRestrictionsResponse)
	err := c.cc.Invoke(ctx, AccountService_GetAccountPlatformRestrictions_FullMethodName, 0x62DA0891, 46, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	ResolveAccount(context.Context, *ResolveAccountRequest) (*ResolveAccountResponse, error)
	Subscribe(context.Context, *SubscriptionUpdateRequest) (*SubscriptionUpdateResponse, error)
	Unsubscribe(context.Context, *SubscriptionUpdateRequest) (*protocol.NoData, error)
	GetAccountState(context.Context, *GetAccountStateRequest) (*GetAccountStateResponse, error)
	GetGameAccountState(context.Context, *GetGameAccountStateRequest) (*GetGameAccountStateResponse, error)
	GetLicenses(context.Context, *GetLicensesRequest) (*GetLicensesResponse, error)
	GetGameTimeRemainingInfo(context.Context, *GetGameTimeRemainingInfoRequest) (*GetGameTimeRemainingInfoResponse, error)
	GetGameSessionInfo(context.Context, *GetGameSessionInfoRequest) (*GetGameSessionInfoResponse, error)
	GetCAISInfo(context.Context, *GetCAISInfoRequest) (*GetCAISInfoResponse, error)
	GetAuthorizedData(context.Context, *GetAuthorizedDataRequest) (*GetAuthorizedDataResponse, error)
	GetSignedAccountState(context.Context, *GetSignedAccountStateRequest) (*GetSignedAccountStateResponse, error)
	GetAccountInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error)
	GetAccountPlatformRestrictions(context.Context, *GetAccountPlatformRestrictionsRequest) (*GetAccountPlatformRestrictionsResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) ResolveAccount(context.Context, *ResolveAccountRequest) (*ResolveAccountResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method ResolveAccount not implemented")
}
func (UnimplementedAccountServiceServer) Subscribe(context.Context, *SubscriptionUpdateRequest) (*SubscriptionUpdateResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Subscribe not implemented")
}
func (UnimplementedAccountServiceServer) Unsubscribe(context.Context, *SubscriptionUpdateRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Unsubscribe not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountState(context.Context, *GetAccountStateRequest) (*GetAccountStateResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetAccountState not implemented")
}
func (UnimplementedAccountServiceServer) GetGameAccountState(context.Context, *GetGameAccountStateRequest) (*GetGameAccountStateResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetGameAccountState not implemented")
}
func (UnimplementedAccountServiceServer) GetLicenses(context.Context, *GetLicensesRequest) (*GetLicensesResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetLicenses not implemented")
}
func (UnimplementedAccountServiceServer) GetGameTimeRemainingInfo(context.Context, *GetGameTimeRemainingInfoRequest) (*GetGameTimeRemainingInfoResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetGameTimeRemainingInfo not implemented")
}
func (UnimplementedAccountServiceServer) GetGameSessionInfo(context.Context, *GetGameSessionInfoRequest) (*GetGameSessionInfoResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetGameSessionInfo not implemented")
}
func (UnimplementedAccountServiceServer) GetCAISInfo(context.Context, *GetCAISInfoRequest) (*GetCAISInfoResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetCAISInfo not implemented")
}
func (UnimplementedAccountServiceServer) GetAuthorizedData(context.Context, *GetAuthorizedDataRequest) (*GetAuthorizedDataResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetAuthorizedData not implemented")
}
func (UnimplementedAccountServiceServer) GetSignedAccountState(context.Context, *GetSignedAccountStateRequest) (*GetSignedAccountStateResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetSignedAccountState not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetAccountInfo not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountPlatformRestrictions(context.Context, *GetAccountPlatformRestrictionsRequest) (*GetAccountPlatformRestrictionsResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetAccountPlatformRestrictions not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s rpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_ResolveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ResolveAccount(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_ResolveAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ResolveAccount(ctx, req.(*ResolveAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Subscribe(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Subscribe(ctx, req.(*SubscriptionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Unsubscribe(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Unsubscribe(ctx, req.(*SubscriptionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountState(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccountState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountState(ctx, req.(*GetAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetGameAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetGameAccountState(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetGameAccountState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetGameAccountState(ctx, req.(*GetGameAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetLicenses(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetLicenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetLicenses(ctx, req.(*GetLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetGameTimeRemainingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameTimeRemainingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetGameTimeRemainingInfo(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetGameTimeRemainingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetGameTimeRemainingInfo(ctx, req.(*GetGameTimeRemainingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetGameSessionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameSessionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetGameSessionInfo(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetGameSessionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetGameSessionInfo(ctx, req.(*GetGameSessionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetCAISInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCAISInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetCAISInfo(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetCAISInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetCAISInfo(ctx, req.(*GetCAISInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAuthorizedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizedDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAuthorizedData(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAuthorizedData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAuthorizedData(ctx, req.(*GetAuthorizedDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetSignedAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignedAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetSignedAccountState(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetSignedAccountState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetSignedAccountState(ctx, req.(*GetSignedAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountInfo(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountInfo(ctx, req.(*GetAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountPlatformRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountPlatformRestrictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountPlatformRestrictions(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccountPlatformRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountPlatformRestrictions(ctx, req.(*GetAccountPlatformRestrictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the rpc.ServiceDesc for AccountService service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0x62DA0891,
	ServiceName: "bgs.protocol.account.v1.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "ResolveAccount",
			MethodId:   13,
			NoResponse: false,
			Handler:    _AccountService_ResolveAccount_Handler,
		},
		{
			MethodName: "Subscribe",
			MethodId:   25,
			NoResponse: false,
			Handler:    _AccountService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			MethodId:   26,
			NoResponse: false,
			Handler:    _AccountService_Unsubscribe_Handler,
		},
		{
			MethodName: "GetAccountState",
			MethodId:   30,
			NoResponse: false,
			Handler:    _AccountService_GetAccountState_Handler,
		},
		{
			MethodName: "GetGameAccountState",
			MethodId:   31,
			NoResponse: false,
			Handler:    _AccountService_GetGameAccountState_Handler,
		},
		{
			MethodName: "GetLicenses",
			MethodId:   32,
			NoResponse: false,
			Handler:    _AccountService_GetLicenses_Handler,
		},
		{
			MethodName: "GetGameTimeRemainingInfo",
			MethodId:   33,
			NoResponse: false,
			Handler:    _AccountService_GetGameTimeRemainingInfo_Handler,
		},
		{
			MethodName: "GetGameSessionInfo",
			MethodId:   34,
			NoResponse: false,
			Handler:    _AccountService_GetGameSessionInfo_Handler,
		},
		{
			MethodName: "GetCAISInfo",
			MethodId:   35,
			NoResponse: false,
			Handler:    _AccountService_GetCAISInfo_Handler,
		},
		{
			MethodName: "GetAuthorizedData",
			MethodId:   37,
			NoResponse: false,
			Handler:    _AccountService_GetAuthorizedData_Handler,
		},
		{
			MethodName: "GetSignedAccountState",
			MethodId:   44,
			NoResponse: false,
			Handler:    _AccountService_GetSignedAccountState_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			MethodId:   45,
			NoResponse: false,
			Handler:    _AccountService_GetAccountInfo_Handler,
		},
		{
			MethodName: "GetAccountPlatformRestrictions",
			MethodId:   46,
			NoResponse: false,
			Handler:    _AccountService_GetAccountPlatformRestrictions_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/account_service.proto",
}

const (
	AccountListener_OnAccountStateUpdated_FullMethodName     = "/bgs.protocol.account.v1.AccountListener/OnAccountStateUpdated"
	AccountListener_OnGameAccountStateUpdated_FullMethodName = "/bgs.protocol.account.v1.AccountListener/OnGameAccountStateUpdated"
	AccountListener_OnGameAccountsUpdated_FullMethodName     = "/bgs.protocol.account.v1.AccountListener/OnGameAccountsUpdated"
	AccountListener_OnGameSessionUpdated_FullMethodName      = "/bgs.protocol.account.v1.AccountListener/OnGameSessionUpdated"
)

// AccountListenerClient is the client API for AccountListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountListenerClient interface {
	OnAccountStateUpdated(ctx context.Context, in *AccountStateNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnGameAccountStateUpdated(ctx context.Context, in *GameAccountStateNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnGameAccountsUpdated(ctx context.Context, in *GameAccountNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnGameSessionUpdated(ctx context.Context, in *GameAccountSessionNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
}

type accountListenerClient struct {
	cc rpc.ClientConnectionInterface
}

func NewAccountListenerClient(cc rpc.ClientConnectionInterface) AccountListenerClient {
	return &accountListenerClient{cc}
}

func (c *accountListenerClient) OnAccountStateUpdated(ctx context.Context, in *AccountStateNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, AccountListener_OnAccountStateUpdated_FullMethodName, 0x54DFDA17, 1, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountListenerClient) OnGameAccountStateUpdated(ctx context.Context, in *GameAccountStateNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, AccountListener_OnGameAccountStateUpdated_FullMethodName, 0x54DFDA17, 2, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountListenerClient) OnGameAccountsUpdated(ctx context.Context, in *GameAccountNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, AccountListener_OnGameAccountsUpdated_FullMethodName, 0x54DFDA17, 3, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountListenerClient) OnGameSessionUpdated(ctx context.Context, in *GameAccountSessionNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, AccountListener_OnGameSessionUpdated_FullMethodName, 0x54DFDA17, 4, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountListenerServer is the server API for AccountListener service.
// All implementations must embed UnimplementedAccountListenerServer
// for forward compatibility
type AccountListenerServer interface {
	OnAccountStateUpdated(context.Context, *AccountStateNotification) (*protocol.NO_RESPONSE, error)
	OnGameAccountStateUpdated(context.Context, *GameAccountStateNotification) (*protocol.NO_RESPONSE, error)
	OnGameAccountsUpdated(context.Context, *GameAccountNotification) (*protocol.NO_RESPONSE, error)
	OnGameSessionUpdated(context.Context, *GameAccountSessionNotification) (*protocol.NO_RESPONSE, error)
	mustEmbedUnimplementedAccountListenerServer()
}

// UnimplementedAccountListenerServer must be embedded to have forward compatible implementations.
type UnimplementedAccountListenerServer struct {
}

func (UnimplementedAccountListenerServer) OnAccountStateUpdated(context.Context, *AccountStateNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnAccountStateUpdated not implemented")
}
func (UnimplementedAccountListenerServer) OnGameAccountStateUpdated(context.Context, *GameAccountStateNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnGameAccountStateUpdated not implemented")
}
func (UnimplementedAccountListenerServer) OnGameAccountsUpdated(context.Context, *GameAccountNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnGameAccountsUpdated not implemented")
}
func (UnimplementedAccountListenerServer) OnGameSessionUpdated(context.Context, *GameAccountSessionNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnGameSessionUpdated not implemented")
}
func (UnimplementedAccountListenerServer) mustEmbedUnimplementedAccountListenerServer() {}

// UnsafeAccountListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountListenerServer will
// result in compilation errors.
type UnsafeAccountListenerServer interface {
	mustEmbedUnimplementedAccountListenerServer()
}

func RegisterAccountListenerServer(s rpc.ServiceRegistrar, srv AccountListenerServer) {
	s.RegisterService(&AccountListener_ServiceDesc, srv)
}

func _AccountListener_OnAccountStateUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountStateNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountListenerServer).OnAccountStateUpdated(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountListener_OnAccountStateUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountListenerServer).OnAccountStateUpdated(ctx, req.(*AccountStateNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountListener_OnGameAccountStateUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameAccountStateNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountListenerServer).OnGameAccountStateUpdated(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountListener_OnGameAccountStateUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountListenerServer).OnGameAccountStateUpdated(ctx, req.(*GameAccountStateNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountListener_OnGameAccountsUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameAccountNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountListenerServer).OnGameAccountsUpdated(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountListener_OnGameAccountsUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountListenerServer).OnGameAccountsUpdated(ctx, req.(*GameAccountNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountListener_OnGameSessionUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameAccountSessionNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountListenerServer).OnGameSessionUpdated(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountListener_OnGameSessionUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountListenerServer).OnGameSessionUpdated(ctx, req.(*GameAccountSessionNotification))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountListener_ServiceDesc is the rpc.ServiceDesc for AccountListener service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountListener_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0x54DFDA17,
	ServiceName: "bgs.protocol.account.v1.AccountListener",
	HandlerType: (*AccountListenerServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "OnAccountStateUpdated",
			MethodId:   1,
			NoResponse: true,
			Handler:    _AccountListener_OnAccountStateUpdated_Handler,
		},
		{
			MethodName: "OnGameAccountStateUpdated",
			MethodId:   2,
			NoResponse: true,
			Handler:    _AccountListener_OnGameAccountStateUpdated_Handler,
		},
		{
			MethodName: "OnGameAccountsUpdated",
			MethodId:   3,
			NoResponse: true,
			Handler:    _AccountListener_OnGameAccountsUpdated_Handler,
		},
		{
			MethodName: "OnGameSessionUpdated",
			MethodId:   4,
			NoResponse: true,
			Handler:    _AccountListener_OnGameSessionUpdated_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/account_service.proto",
}

// DO NOT EDIT: this file was auto-generated by Gophercraft/protoss

// Code generated by protoc-gen-go-bnet. DO NOT EDIT.
// versions:
// - protoc-gen-go-bnet v1.3.0
// - protoc             v4.25.2
// source: bgs/low/pb/client/challenge_service.proto

package v1

import (
	context "context"
	protocol "github.com/Gophercraft/core/bnet/pb/bgs/protocol"
	rpc "github.com/Gophercraft/core/bnet/rpc"
	codes "github.com/Gophercraft/core/bnet/rpc/codes"
	status "github.com/Gophercraft/core/bnet/rpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the bnet package it is being compiled against.
const _ = rpc.SupportPackageIsVersion1

const (
	ChallengeListener_OnExternalChallenge_FullMethodName       = "/bgs.protocol.challenge.v1.ChallengeListener/OnExternalChallenge"
	ChallengeListener_OnExternalChallengeResult_FullMethodName = "/bgs.protocol.challenge.v1.ChallengeListener/OnExternalChallengeResult"
)

// ChallengeListenerClient is the client API for ChallengeListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChallengeListenerClient interface {
	OnExternalChallenge(ctx context.Context, in *ChallengeExternalRequest, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnExternalChallengeResult(ctx context.Context, in *ChallengeExternalResult, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
}

type challengeListenerClient struct {
	cc rpc.ClientConnectionInterface
}

func NewChallengeListenerClient(cc rpc.ClientConnectionInterface) ChallengeListenerClient {
	return &challengeListenerClient{cc}
}

func (c *challengeListenerClient) OnExternalChallenge(ctx context.Context, in *ChallengeExternalRequest, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, ChallengeListener_OnExternalChallenge_FullMethodName, 0xBBDA171F, 3, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeListenerClient) OnExternalChallengeResult(ctx context.Context, in *ChallengeExternalResult, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, ChallengeListener_OnExternalChallengeResult_FullMethodName, 0xBBDA171F, 4, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChallengeListenerServer is the server API for ChallengeListener service.
// All implementations must embed UnimplementedChallengeListenerServer
// for forward compatibility
type ChallengeListenerServer interface {
	OnExternalChallenge(context.Context, *ChallengeExternalRequest) (*protocol.NO_RESPONSE, error)
	OnExternalChallengeResult(context.Context, *ChallengeExternalResult) (*protocol.NO_RESPONSE, error)
	mustEmbedUnimplementedChallengeListenerServer()
}

// UnimplementedChallengeListenerServer must be embedded to have forward compatible implementations.
type UnimplementedChallengeListenerServer struct {
}

func (UnimplementedChallengeListenerServer) OnExternalChallenge(context.Context, *ChallengeExternalRequest) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnExternalChallenge not implemented")
}
func (UnimplementedChallengeListenerServer) OnExternalChallengeResult(context.Context, *ChallengeExternalResult) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnExternalChallengeResult not implemented")
}
func (UnimplementedChallengeListenerServer) mustEmbedUnimplementedChallengeListenerServer() {}

// UnsafeChallengeListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChallengeListenerServer will
// result in compilation errors.
type UnsafeChallengeListenerServer interface {
	mustEmbedUnimplementedChallengeListenerServer()
}

func RegisterChallengeListenerServer(s rpc.ServiceRegistrar, srv ChallengeListenerServer) {
	s.RegisterService(&ChallengeListener_ServiceDesc, srv)
}

func _ChallengeListener_OnExternalChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeExternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeListenerServer).OnExternalChallenge(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeListener_OnExternalChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeListenerServer).OnExternalChallenge(ctx, req.(*ChallengeExternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeListener_OnExternalChallengeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeExternalResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeListenerServer).OnExternalChallengeResult(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeListener_OnExternalChallengeResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeListenerServer).OnExternalChallengeResult(ctx, req.(*ChallengeExternalResult))
	}
	return interceptor(ctx, in, info, handler)
}

// ChallengeListener_ServiceDesc is the rpc.ServiceDesc for ChallengeListener service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChallengeListener_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0xBBDA171F,
	ServiceName: "bgs.protocol.challenge.v1.ChallengeListener",
	HandlerType: (*ChallengeListenerServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "OnExternalChallenge",
			MethodId:   3,
			NoResponse: true,
			Handler:    _ChallengeListener_OnExternalChallenge_Handler,
		},
		{
			MethodName: "OnExternalChallengeResult",
			MethodId:   4,
			NoResponse: true,
			Handler:    _ChallengeListener_OnExternalChallengeResult_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/challenge_service.proto",
}

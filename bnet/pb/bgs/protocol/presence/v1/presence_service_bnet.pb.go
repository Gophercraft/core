// DO NOT EDIT: this file was auto-generated by Gophercraft/protoss

// Code generated by protoc-gen-go-bnet. DO NOT EDIT.
// versions:
// - protoc-gen-go-bnet v1.3.0
// - protoc             v4.25.2
// source: bgs/low/pb/client/presence_service.proto

package v1

import (
	context "context"
	protocol "github.com/Gophercraft/core/bnet/pb/bgs/protocol"
	rpc "github.com/Gophercraft/core/bnet/rpc"
	codes "github.com/Gophercraft/core/bnet/rpc/codes"
	status "github.com/Gophercraft/core/bnet/rpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the bnet package it is being compiled against.
const _ = rpc.SupportPackageIsVersion1

const (
	PresenceService_Subscribe_FullMethodName        = "/bgs.protocol.presence.v1.PresenceService/Subscribe"
	PresenceService_Unsubscribe_FullMethodName      = "/bgs.protocol.presence.v1.PresenceService/Unsubscribe"
	PresenceService_Update_FullMethodName           = "/bgs.protocol.presence.v1.PresenceService/Update"
	PresenceService_Query_FullMethodName            = "/bgs.protocol.presence.v1.PresenceService/Query"
	PresenceService_BatchSubscribe_FullMethodName   = "/bgs.protocol.presence.v1.PresenceService/BatchSubscribe"
	PresenceService_BatchUnsubscribe_FullMethodName = "/bgs.protocol.presence.v1.PresenceService/BatchUnsubscribe"
)

// PresenceServiceClient is the client API for PresenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PresenceServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	Query(ctx context.Context, in *QueryRequest, opts ...rpc.CallOption) (*QueryResponse, error)
	BatchSubscribe(ctx context.Context, in *BatchSubscribeRequest, opts ...rpc.CallOption) (*BatchSubscribeResponse, error)
	BatchUnsubscribe(ctx context.Context, in *BatchUnsubscribeRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
}

type presenceServiceClient struct {
	cc rpc.ClientConnectionInterface
}

func NewPresenceServiceClient(cc rpc.ClientConnectionInterface) PresenceServiceClient {
	return &presenceServiceClient{cc}
}

func (c *presenceServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, PresenceService_Subscribe_FullMethodName, 0xFA0796FF, 1, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, PresenceService_Unsubscribe_FullMethodName, 0xFA0796FF, 2, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, PresenceService_Update_FullMethodName, 0xFA0796FF, 3, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...rpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, PresenceService_Query_FullMethodName, 0xFA0796FF, 4, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceServiceClient) BatchSubscribe(ctx context.Context, in *BatchSubscribeRequest, opts ...rpc.CallOption) (*BatchSubscribeResponse, error) {
	out := new(BatchSubscribeResponse)
	err := c.cc.Invoke(ctx, PresenceService_BatchSubscribe_FullMethodName, 0xFA0796FF, 8, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceServiceClient) BatchUnsubscribe(ctx context.Context, in *BatchUnsubscribeRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, PresenceService_BatchUnsubscribe_FullMethodName, 0xFA0796FF, 9, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresenceServiceServer is the server API for PresenceService service.
// All implementations must embed UnimplementedPresenceServiceServer
// for forward compatibility
type PresenceServiceServer interface {
	Subscribe(context.Context, *SubscribeRequest) (*protocol.NoData, error)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*protocol.NoData, error)
	Update(context.Context, *UpdateRequest) (*protocol.NoData, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	BatchSubscribe(context.Context, *BatchSubscribeRequest) (*BatchSubscribeResponse, error)
	BatchUnsubscribe(context.Context, *BatchUnsubscribeRequest) (*protocol.NoData, error)
	mustEmbedUnimplementedPresenceServiceServer()
}

// UnimplementedPresenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPresenceServiceServer struct {
}

func (UnimplementedPresenceServiceServer) Subscribe(context.Context, *SubscribeRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Subscribe not implemented")
}
func (UnimplementedPresenceServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Unsubscribe not implemented")
}
func (UnimplementedPresenceServiceServer) Update(context.Context, *UpdateRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Update not implemented")
}
func (UnimplementedPresenceServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Query not implemented")
}
func (UnimplementedPresenceServiceServer) BatchSubscribe(context.Context, *BatchSubscribeRequest) (*BatchSubscribeResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method BatchSubscribe not implemented")
}
func (UnimplementedPresenceServiceServer) BatchUnsubscribe(context.Context, *BatchUnsubscribeRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method BatchUnsubscribe not implemented")
}
func (UnimplementedPresenceServiceServer) mustEmbedUnimplementedPresenceServiceServer() {}

// UnsafePresenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresenceServiceServer will
// result in compilation errors.
type UnsafePresenceServiceServer interface {
	mustEmbedUnimplementedPresenceServiceServer()
}

func RegisterPresenceServiceServer(s rpc.ServiceRegistrar, srv PresenceServiceServer) {
	s.RegisterService(&PresenceService_ServiceDesc, srv)
}

func _PresenceService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).Subscribe(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).Unsubscribe(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).Update(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).Query(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceService_BatchSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).BatchSubscribe(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_BatchSubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).BatchSubscribe(ctx, req.(*BatchSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceService_BatchUnsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).BatchUnsubscribe(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_BatchUnsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).BatchUnsubscribe(ctx, req.(*BatchUnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PresenceService_ServiceDesc is the rpc.ServiceDesc for PresenceService service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PresenceService_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0xFA0796FF,
	ServiceName: "bgs.protocol.presence.v1.PresenceService",
	HandlerType: (*PresenceServiceServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "Subscribe",
			MethodId:   1,
			NoResponse: false,
			Handler:    _PresenceService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			MethodId:   2,
			NoResponse: false,
			Handler:    _PresenceService_Unsubscribe_Handler,
		},
		{
			MethodName: "Update",
			MethodId:   3,
			NoResponse: false,
			Handler:    _PresenceService_Update_Handler,
		},
		{
			MethodName: "Query",
			MethodId:   4,
			NoResponse: false,
			Handler:    _PresenceService_Query_Handler,
		},
		{
			MethodName: "BatchSubscribe",
			MethodId:   8,
			NoResponse: false,
			Handler:    _PresenceService_BatchSubscribe_Handler,
		},
		{
			MethodName: "BatchUnsubscribe",
			MethodId:   9,
			NoResponse: false,
			Handler:    _PresenceService_BatchUnsubscribe_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/presence_service.proto",
}

// DO NOT EDIT: this file was auto-generated by Gophercraft/protoss

// Code generated by protoc-gen-go-bnet. DO NOT EDIT.
// versions:
// - protoc-gen-go-bnet v1.3.0
// - protoc             v4.25.2
// source: bgs/low/pb/client/presence_listener.proto

package v1

import (
	context "context"
	protocol "github.com/Gophercraft/core/bnet/pb/bgs/protocol"
	rpc "github.com/Gophercraft/core/bnet/rpc"
	codes "github.com/Gophercraft/core/bnet/rpc/codes"
	status "github.com/Gophercraft/core/bnet/rpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the bnet package it is being compiled against.
const _ = rpc.SupportPackageIsVersion1

const (
	PresenceListener_OnSubscribe_FullMethodName    = "/bgs.protocol.presence.v1.PresenceListener/OnSubscribe"
	PresenceListener_OnStateChanged_FullMethodName = "/bgs.protocol.presence.v1.PresenceListener/OnStateChanged"
)

// PresenceListenerClient is the client API for PresenceListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PresenceListenerClient interface {
	OnSubscribe(ctx context.Context, in *SubscribeNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnStateChanged(ctx context.Context, in *StateChangedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
}

type presenceListenerClient struct {
	cc rpc.ClientConnectionInterface
}

func NewPresenceListenerClient(cc rpc.ClientConnectionInterface) PresenceListenerClient {
	return &presenceListenerClient{cc}
}

func (c *presenceListenerClient) OnSubscribe(ctx context.Context, in *SubscribeNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, PresenceListener_OnSubscribe_FullMethodName, 0x890AB85F, 1, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceListenerClient) OnStateChanged(ctx context.Context, in *StateChangedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, PresenceListener_OnStateChanged_FullMethodName, 0x890AB85F, 2, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresenceListenerServer is the server API for PresenceListener service.
// All implementations must embed UnimplementedPresenceListenerServer
// for forward compatibility
type PresenceListenerServer interface {
	OnSubscribe(context.Context, *SubscribeNotification) (*protocol.NO_RESPONSE, error)
	OnStateChanged(context.Context, *StateChangedNotification) (*protocol.NO_RESPONSE, error)
	mustEmbedUnimplementedPresenceListenerServer()
}

// UnimplementedPresenceListenerServer must be embedded to have forward compatible implementations.
type UnimplementedPresenceListenerServer struct {
}

func (UnimplementedPresenceListenerServer) OnSubscribe(context.Context, *SubscribeNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnSubscribe not implemented")
}
func (UnimplementedPresenceListenerServer) OnStateChanged(context.Context, *StateChangedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnStateChanged not implemented")
}
func (UnimplementedPresenceListenerServer) mustEmbedUnimplementedPresenceListenerServer() {}

// UnsafePresenceListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresenceListenerServer will
// result in compilation errors.
type UnsafePresenceListenerServer interface {
	mustEmbedUnimplementedPresenceListenerServer()
}

func RegisterPresenceListenerServer(s rpc.ServiceRegistrar, srv PresenceListenerServer) {
	s.RegisterService(&PresenceListener_ServiceDesc, srv)
}

func _PresenceListener_OnSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceListenerServer).OnSubscribe(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceListener_OnSubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceListenerServer).OnSubscribe(ctx, req.(*SubscribeNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceListener_OnStateChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateChangedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceListenerServer).OnStateChanged(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceListener_OnStateChanged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceListenerServer).OnStateChanged(ctx, req.(*StateChangedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

// PresenceListener_ServiceDesc is the rpc.ServiceDesc for PresenceListener service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PresenceListener_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0x890AB85F,
	ServiceName: "bgs.protocol.presence.v1.PresenceListener",
	HandlerType: (*PresenceListenerServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "OnSubscribe",
			MethodId:   1,
			NoResponse: true,
			Handler:    _PresenceListener_OnSubscribe_Handler,
		},
		{
			MethodName: "OnStateChanged",
			MethodId:   2,
			NoResponse: true,
			Handler:    _PresenceListener_OnStateChanged_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/presence_listener.proto",
}

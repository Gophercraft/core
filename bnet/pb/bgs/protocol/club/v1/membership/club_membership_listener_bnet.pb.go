// DO NOT EDIT: this file was auto-generated by Gophercraft/protoss

// Code generated by protoc-gen-go-bnet. DO NOT EDIT.
// versions:
// - protoc-gen-go-bnet v1.3.0
// - protoc             v4.25.2
// source: bgs/low/pb/client/club_membership_listener.proto

package membership

import (
	context "context"
	protocol "github.com/Gophercraft/core/bnet/pb/bgs/protocol"
	rpc "github.com/Gophercraft/core/bnet/rpc"
	codes "github.com/Gophercraft/core/bnet/rpc/codes"
	status "github.com/Gophercraft/core/bnet/rpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the bnet package it is being compiled against.
const _ = rpc.SupportPackageIsVersion1

const (
	ClubMembershipListener_OnClubAdded_FullMethodName                    = "/bgs.protocol.club.v1.membership.ClubMembershipListener/OnClubAdded"
	ClubMembershipListener_OnClubRemoved_FullMethodName                  = "/bgs.protocol.club.v1.membership.ClubMembershipListener/OnClubRemoved"
	ClubMembershipListener_OnReceivedInvitationAdded_FullMethodName      = "/bgs.protocol.club.v1.membership.ClubMembershipListener/OnReceivedInvitationAdded"
	ClubMembershipListener_OnReceivedInvitationRemoved_FullMethodName    = "/bgs.protocol.club.v1.membership.ClubMembershipListener/OnReceivedInvitationRemoved"
	ClubMembershipListener_OnSharedSettingsChanged_FullMethodName        = "/bgs.protocol.club.v1.membership.ClubMembershipListener/OnSharedSettingsChanged"
	ClubMembershipListener_OnStreamMentionAdded_FullMethodName           = "/bgs.protocol.club.v1.membership.ClubMembershipListener/OnStreamMentionAdded"
	ClubMembershipListener_OnStreamMentionRemoved_FullMethodName         = "/bgs.protocol.club.v1.membership.ClubMembershipListener/OnStreamMentionRemoved"
	ClubMembershipListener_OnStreamMentionAdvanceViewTime_FullMethodName = "/bgs.protocol.club.v1.membership.ClubMembershipListener/OnStreamMentionAdvanceViewTime"
)

// ClubMembershipListenerClient is the client API for ClubMembershipListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubMembershipListenerClient interface {
	OnClubAdded(ctx context.Context, in *ClubAddedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnClubRemoved(ctx context.Context, in *ClubRemovedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnReceivedInvitationAdded(ctx context.Context, in *ReceivedInvitationAddedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnReceivedInvitationRemoved(ctx context.Context, in *ReceivedInvitationRemovedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnSharedSettingsChanged(ctx context.Context, in *SharedSettingsChangedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnStreamMentionAdded(ctx context.Context, in *StreamMentionAddedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnStreamMentionRemoved(ctx context.Context, in *StreamMentionRemovedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	OnStreamMentionAdvanceViewTime(ctx context.Context, in *StreamMentionAdvanceViewTimeNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
}

type clubMembershipListenerClient struct {
	cc rpc.ClientConnectionInterface
}

func NewClubMembershipListenerClient(cc rpc.ClientConnectionInterface) ClubMembershipListenerClient {
	return &clubMembershipListenerClient{cc}
}

func (c *clubMembershipListenerClient) OnClubAdded(ctx context.Context, in *ClubAddedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, ClubMembershipListener_OnClubAdded_FullMethodName, 0x2B34597B, 1, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubMembershipListenerClient) OnClubRemoved(ctx context.Context, in *ClubRemovedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, ClubMembershipListener_OnClubRemoved_FullMethodName, 0x2B34597B, 2, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubMembershipListenerClient) OnReceivedInvitationAdded(ctx context.Context, in *ReceivedInvitationAddedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, ClubMembershipListener_OnReceivedInvitationAdded_FullMethodName, 0x2B34597B, 3, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubMembershipListenerClient) OnReceivedInvitationRemoved(ctx context.Context, in *ReceivedInvitationRemovedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, ClubMembershipListener_OnReceivedInvitationRemoved_FullMethodName, 0x2B34597B, 4, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubMembershipListenerClient) OnSharedSettingsChanged(ctx context.Context, in *SharedSettingsChangedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, ClubMembershipListener_OnSharedSettingsChanged_FullMethodName, 0x2B34597B, 5, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubMembershipListenerClient) OnStreamMentionAdded(ctx context.Context, in *StreamMentionAddedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, ClubMembershipListener_OnStreamMentionAdded_FullMethodName, 0x2B34597B, 6, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubMembershipListenerClient) OnStreamMentionRemoved(ctx context.Context, in *StreamMentionRemovedNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, ClubMembershipListener_OnStreamMentionRemoved_FullMethodName, 0x2B34597B, 7, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubMembershipListenerClient) OnStreamMentionAdvanceViewTime(ctx context.Context, in *StreamMentionAdvanceViewTimeNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, ClubMembershipListener_OnStreamMentionAdvanceViewTime_FullMethodName, 0x2B34597B, 8, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubMembershipListenerServer is the server API for ClubMembershipListener service.
// All implementations must embed UnimplementedClubMembershipListenerServer
// for forward compatibility
type ClubMembershipListenerServer interface {
	OnClubAdded(context.Context, *ClubAddedNotification) (*protocol.NO_RESPONSE, error)
	OnClubRemoved(context.Context, *ClubRemovedNotification) (*protocol.NO_RESPONSE, error)
	OnReceivedInvitationAdded(context.Context, *ReceivedInvitationAddedNotification) (*protocol.NO_RESPONSE, error)
	OnReceivedInvitationRemoved(context.Context, *ReceivedInvitationRemovedNotification) (*protocol.NO_RESPONSE, error)
	OnSharedSettingsChanged(context.Context, *SharedSettingsChangedNotification) (*protocol.NO_RESPONSE, error)
	OnStreamMentionAdded(context.Context, *StreamMentionAddedNotification) (*protocol.NO_RESPONSE, error)
	OnStreamMentionRemoved(context.Context, *StreamMentionRemovedNotification) (*protocol.NO_RESPONSE, error)
	OnStreamMentionAdvanceViewTime(context.Context, *StreamMentionAdvanceViewTimeNotification) (*protocol.NO_RESPONSE, error)
	mustEmbedUnimplementedClubMembershipListenerServer()
}

// UnimplementedClubMembershipListenerServer must be embedded to have forward compatible implementations.
type UnimplementedClubMembershipListenerServer struct {
}

func (UnimplementedClubMembershipListenerServer) OnClubAdded(context.Context, *ClubAddedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnClubAdded not implemented")
}
func (UnimplementedClubMembershipListenerServer) OnClubRemoved(context.Context, *ClubRemovedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnClubRemoved not implemented")
}
func (UnimplementedClubMembershipListenerServer) OnReceivedInvitationAdded(context.Context, *ReceivedInvitationAddedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnReceivedInvitationAdded not implemented")
}
func (UnimplementedClubMembershipListenerServer) OnReceivedInvitationRemoved(context.Context, *ReceivedInvitationRemovedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnReceivedInvitationRemoved not implemented")
}
func (UnimplementedClubMembershipListenerServer) OnSharedSettingsChanged(context.Context, *SharedSettingsChangedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnSharedSettingsChanged not implemented")
}
func (UnimplementedClubMembershipListenerServer) OnStreamMentionAdded(context.Context, *StreamMentionAddedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnStreamMentionAdded not implemented")
}
func (UnimplementedClubMembershipListenerServer) OnStreamMentionRemoved(context.Context, *StreamMentionRemovedNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnStreamMentionRemoved not implemented")
}
func (UnimplementedClubMembershipListenerServer) OnStreamMentionAdvanceViewTime(context.Context, *StreamMentionAdvanceViewTimeNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method OnStreamMentionAdvanceViewTime not implemented")
}
func (UnimplementedClubMembershipListenerServer) mustEmbedUnimplementedClubMembershipListenerServer() {
}

// UnsafeClubMembershipListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubMembershipListenerServer will
// result in compilation errors.
type UnsafeClubMembershipListenerServer interface {
	mustEmbedUnimplementedClubMembershipListenerServer()
}

func RegisterClubMembershipListenerServer(s rpc.ServiceRegistrar, srv ClubMembershipListenerServer) {
	s.RegisterService(&ClubMembershipListener_ServiceDesc, srv)
}

func _ClubMembershipListener_OnClubAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubAddedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipListenerServer).OnClubAdded(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipListener_OnClubAdded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipListenerServer).OnClubAdded(ctx, req.(*ClubAddedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubMembershipListener_OnClubRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubRemovedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipListenerServer).OnClubRemoved(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipListener_OnClubRemoved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipListenerServer).OnClubRemoved(ctx, req.(*ClubRemovedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubMembershipListener_OnReceivedInvitationAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedInvitationAddedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipListenerServer).OnReceivedInvitationAdded(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipListener_OnReceivedInvitationAdded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipListenerServer).OnReceivedInvitationAdded(ctx, req.(*ReceivedInvitationAddedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubMembershipListener_OnReceivedInvitationRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedInvitationRemovedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipListenerServer).OnReceivedInvitationRemoved(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipListener_OnReceivedInvitationRemoved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipListenerServer).OnReceivedInvitationRemoved(ctx, req.(*ReceivedInvitationRemovedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubMembershipListener_OnSharedSettingsChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedSettingsChangedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipListenerServer).OnSharedSettingsChanged(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipListener_OnSharedSettingsChanged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipListenerServer).OnSharedSettingsChanged(ctx, req.(*SharedSettingsChangedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubMembershipListener_OnStreamMentionAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamMentionAddedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipListenerServer).OnStreamMentionAdded(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipListener_OnStreamMentionAdded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipListenerServer).OnStreamMentionAdded(ctx, req.(*StreamMentionAddedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubMembershipListener_OnStreamMentionRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamMentionRemovedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipListenerServer).OnStreamMentionRemoved(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipListener_OnStreamMentionRemoved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipListenerServer).OnStreamMentionRemoved(ctx, req.(*StreamMentionRemovedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubMembershipListener_OnStreamMentionAdvanceViewTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamMentionAdvanceViewTimeNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipListenerServer).OnStreamMentionAdvanceViewTime(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipListener_OnStreamMentionAdvanceViewTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipListenerServer).OnStreamMentionAdvanceViewTime(ctx, req.(*StreamMentionAdvanceViewTimeNotification))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubMembershipListener_ServiceDesc is the rpc.ServiceDesc for ClubMembershipListener service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubMembershipListener_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0x2B34597B,
	ServiceName: "bgs.protocol.club.v1.membership.ClubMembershipListener",
	HandlerType: (*ClubMembershipListenerServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "OnClubAdded",
			MethodId:   1,
			NoResponse: true,
			Handler:    _ClubMembershipListener_OnClubAdded_Handler,
		},
		{
			MethodName: "OnClubRemoved",
			MethodId:   2,
			NoResponse: true,
			Handler:    _ClubMembershipListener_OnClubRemoved_Handler,
		},
		{
			MethodName: "OnReceivedInvitationAdded",
			MethodId:   3,
			NoResponse: true,
			Handler:    _ClubMembershipListener_OnReceivedInvitationAdded_Handler,
		},
		{
			MethodName: "OnReceivedInvitationRemoved",
			MethodId:   4,
			NoResponse: true,
			Handler:    _ClubMembershipListener_OnReceivedInvitationRemoved_Handler,
		},
		{
			MethodName: "OnSharedSettingsChanged",
			MethodId:   5,
			NoResponse: true,
			Handler:    _ClubMembershipListener_OnSharedSettingsChanged_Handler,
		},
		{
			MethodName: "OnStreamMentionAdded",
			MethodId:   6,
			NoResponse: true,
			Handler:    _ClubMembershipListener_OnStreamMentionAdded_Handler,
		},
		{
			MethodName: "OnStreamMentionRemoved",
			MethodId:   7,
			NoResponse: true,
			Handler:    _ClubMembershipListener_OnStreamMentionRemoved_Handler,
		},
		{
			MethodName: "OnStreamMentionAdvanceViewTime",
			MethodId:   8,
			NoResponse: true,
			Handler:    _ClubMembershipListener_OnStreamMentionAdvanceViewTime_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/club_membership_listener.proto",
}

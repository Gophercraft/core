// DO NOT EDIT: this file was auto-generated by Gophercraft/protoss

// Code generated by protoc-gen-go-bnet. DO NOT EDIT.
// versions:
// - protoc-gen-go-bnet v1.3.0
// - protoc             v4.25.2
// source: bgs/low/pb/client/club_membership_service.proto

package membership

import (
	context "context"
	protocol "github.com/Gophercraft/core/bnet/pb/bgs/protocol"
	rpc "github.com/Gophercraft/core/bnet/rpc"
	codes "github.com/Gophercraft/core/bnet/rpc/codes"
	status "github.com/Gophercraft/core/bnet/rpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the bnet package it is being compiled against.
const _ = rpc.SupportPackageIsVersion1

const (
	ClubMembershipService_Subscribe_FullMethodName                    = "/bgs.protocol.club.v1.membership.ClubMembershipService/Subscribe"
	ClubMembershipService_Unsubscribe_FullMethodName                  = "/bgs.protocol.club.v1.membership.ClubMembershipService/Unsubscribe"
	ClubMembershipService_GetState_FullMethodName                     = "/bgs.protocol.club.v1.membership.ClubMembershipService/GetState"
	ClubMembershipService_UpdateClubSharedSettings_FullMethodName     = "/bgs.protocol.club.v1.membership.ClubMembershipService/UpdateClubSharedSettings"
	ClubMembershipService_GetStreamMentions_FullMethodName            = "/bgs.protocol.club.v1.membership.ClubMembershipService/GetStreamMentions"
	ClubMembershipService_RemoveStreamMentions_FullMethodName         = "/bgs.protocol.club.v1.membership.ClubMembershipService/RemoveStreamMentions"
	ClubMembershipService_AdvanceStreamMentionViewTime_FullMethodName = "/bgs.protocol.club.v1.membership.ClubMembershipService/AdvanceStreamMentionViewTime"
)

// ClubMembershipServiceClient is the client API for ClubMembershipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubMembershipServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...rpc.CallOption) (*SubscribeResponse, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...rpc.CallOption) (*GetStateResponse, error)
	UpdateClubSharedSettings(ctx context.Context, in *UpdateClubSharedSettingsRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	GetStreamMentions(ctx context.Context, in *GetStreamMentionsRequest, opts ...rpc.CallOption) (*GetStreamMentionsResponse, error)
	RemoveStreamMentions(ctx context.Context, in *RemoveStreamMentionsRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	AdvanceStreamMentionViewTime(ctx context.Context, in *AdvanceStreamMentionViewTimeRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
}

type clubMembershipServiceClient struct {
	cc rpc.ClientConnectionInterface
}

func NewClubMembershipServiceClient(cc rpc.ClientConnectionInterface) ClubMembershipServiceClient {
	return &clubMembershipServiceClient{cc}
}

func (c *clubMembershipServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...rpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, ClubMembershipService_Subscribe_FullMethodName, 0x94B94786, 1, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubMembershipServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, ClubMembershipService_Unsubscribe_FullMethodName, 0x94B94786, 2, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubMembershipServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...rpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, ClubMembershipService_GetState_FullMethodName, 0x94B94786, 3, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubMembershipServiceClient) UpdateClubSharedSettings(ctx context.Context, in *UpdateClubSharedSettingsRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, ClubMembershipService_UpdateClubSharedSettings_FullMethodName, 0x94B94786, 4, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubMembershipServiceClient) GetStreamMentions(ctx context.Context, in *GetStreamMentionsRequest, opts ...rpc.CallOption) (*GetStreamMentionsResponse, error) {
	out := new(GetStreamMentionsResponse)
	err := c.cc.Invoke(ctx, ClubMembershipService_GetStreamMentions_FullMethodName, 0x94B94786, 5, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubMembershipServiceClient) RemoveStreamMentions(ctx context.Context, in *RemoveStreamMentionsRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, ClubMembershipService_RemoveStreamMentions_FullMethodName, 0x94B94786, 6, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubMembershipServiceClient) AdvanceStreamMentionViewTime(ctx context.Context, in *AdvanceStreamMentionViewTimeRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, ClubMembershipService_AdvanceStreamMentionViewTime_FullMethodName, 0x94B94786, 7, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubMembershipServiceServer is the server API for ClubMembershipService service.
// All implementations must embed UnimplementedClubMembershipServiceServer
// for forward compatibility
type ClubMembershipServiceServer interface {
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*protocol.NoData, error)
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	UpdateClubSharedSettings(context.Context, *UpdateClubSharedSettingsRequest) (*protocol.NoData, error)
	GetStreamMentions(context.Context, *GetStreamMentionsRequest) (*GetStreamMentionsResponse, error)
	RemoveStreamMentions(context.Context, *RemoveStreamMentionsRequest) (*protocol.NoData, error)
	AdvanceStreamMentionViewTime(context.Context, *AdvanceStreamMentionViewTimeRequest) (*protocol.NoData, error)
	mustEmbedUnimplementedClubMembershipServiceServer()
}

// UnimplementedClubMembershipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClubMembershipServiceServer struct {
}

func (UnimplementedClubMembershipServiceServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Subscribe not implemented")
}
func (UnimplementedClubMembershipServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Unsubscribe not implemented")
}
func (UnimplementedClubMembershipServiceServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetState not implemented")
}
func (UnimplementedClubMembershipServiceServer) UpdateClubSharedSettings(context.Context, *UpdateClubSharedSettingsRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method UpdateClubSharedSettings not implemented")
}
func (UnimplementedClubMembershipServiceServer) GetStreamMentions(context.Context, *GetStreamMentionsRequest) (*GetStreamMentionsResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetStreamMentions not implemented")
}
func (UnimplementedClubMembershipServiceServer) RemoveStreamMentions(context.Context, *RemoveStreamMentionsRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method RemoveStreamMentions not implemented")
}
func (UnimplementedClubMembershipServiceServer) AdvanceStreamMentionViewTime(context.Context, *AdvanceStreamMentionViewTimeRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method AdvanceStreamMentionViewTime not implemented")
}
func (UnimplementedClubMembershipServiceServer) mustEmbedUnimplementedClubMembershipServiceServer() {}

// UnsafeClubMembershipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubMembershipServiceServer will
// result in compilation errors.
type UnsafeClubMembershipServiceServer interface {
	mustEmbedUnimplementedClubMembershipServiceServer()
}

func RegisterClubMembershipServiceServer(s rpc.ServiceRegistrar, srv ClubMembershipServiceServer) {
	s.RegisterService(&ClubMembershipService_ServiceDesc, srv)
}

func _ClubMembershipService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipServiceServer).Subscribe(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubMembershipService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipServiceServer).Unsubscribe(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubMembershipService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipServiceServer).GetState(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipService_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubMembershipService_UpdateClubSharedSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClubSharedSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipServiceServer).UpdateClubSharedSettings(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipService_UpdateClubSharedSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipServiceServer).UpdateClubSharedSettings(ctx, req.(*UpdateClubSharedSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubMembershipService_GetStreamMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamMentionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipServiceServer).GetStreamMentions(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipService_GetStreamMentions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipServiceServer).GetStreamMentions(ctx, req.(*GetStreamMentionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubMembershipService_RemoveStreamMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStreamMentionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipServiceServer).RemoveStreamMentions(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipService_RemoveStreamMentions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipServiceServer).RemoveStreamMentions(ctx, req.(*RemoveStreamMentionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubMembershipService_AdvanceStreamMentionViewTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvanceStreamMentionViewTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubMembershipServiceServer).AdvanceStreamMentionViewTime(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubMembershipService_AdvanceStreamMentionViewTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubMembershipServiceServer).AdvanceStreamMentionViewTime(ctx, req.(*AdvanceStreamMentionViewTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubMembershipService_ServiceDesc is the rpc.ServiceDesc for ClubMembershipService service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubMembershipService_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0x94B94786,
	ServiceName: "bgs.protocol.club.v1.membership.ClubMembershipService",
	HandlerType: (*ClubMembershipServiceServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "Subscribe",
			MethodId:   1,
			NoResponse: false,
			Handler:    _ClubMembershipService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			MethodId:   2,
			NoResponse: false,
			Handler:    _ClubMembershipService_Unsubscribe_Handler,
		},
		{
			MethodName: "GetState",
			MethodId:   3,
			NoResponse: false,
			Handler:    _ClubMembershipService_GetState_Handler,
		},
		{
			MethodName: "UpdateClubSharedSettings",
			MethodId:   4,
			NoResponse: false,
			Handler:    _ClubMembershipService_UpdateClubSharedSettings_Handler,
		},
		{
			MethodName: "GetStreamMentions",
			MethodId:   5,
			NoResponse: false,
			Handler:    _ClubMembershipService_GetStreamMentions_Handler,
		},
		{
			MethodName: "RemoveStreamMentions",
			MethodId:   6,
			NoResponse: false,
			Handler:    _ClubMembershipService_RemoveStreamMentions_Handler,
		},
		{
			MethodName: "AdvanceStreamMentionViewTime",
			MethodId:   7,
			NoResponse: false,
			Handler:    _ClubMembershipService_AdvanceStreamMentionViewTime_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/club_membership_service.proto",
}

// DO NOT EDIT: this file was auto-generated by Gophercraft/protoss

// Code generated by protoc-gen-go-bnet. DO NOT EDIT.
// versions:
// - protoc-gen-go-bnet v1.3.0
// - protoc             v4.25.2
// source: bgs/low/pb/client/connection_service.proto

package v1

import (
	context "context"
	protocol "github.com/Gophercraft/core/bnet/pb/bgs/protocol"
	rpc "github.com/Gophercraft/core/bnet/rpc"
	codes "github.com/Gophercraft/core/bnet/rpc/codes"
	status "github.com/Gophercraft/core/bnet/rpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the bnet package it is being compiled against.
const _ = rpc.SupportPackageIsVersion1

const (
	ConnectionService_Connect_FullMethodName           = "/bgs.protocol.connection.v1.ConnectionService/Connect"
	ConnectionService_Bind_FullMethodName              = "/bgs.protocol.connection.v1.ConnectionService/Bind"
	ConnectionService_Echo_FullMethodName              = "/bgs.protocol.connection.v1.ConnectionService/Echo"
	ConnectionService_ForceDisconnect_FullMethodName   = "/bgs.protocol.connection.v1.ConnectionService/ForceDisconnect"
	ConnectionService_KeepAlive_FullMethodName         = "/bgs.protocol.connection.v1.ConnectionService/KeepAlive"
	ConnectionService_Encrypt_FullMethodName           = "/bgs.protocol.connection.v1.ConnectionService/Encrypt"
	ConnectionService_RequestDisconnect_FullMethodName = "/bgs.protocol.connection.v1.ConnectionService/RequestDisconnect"
)

// ConnectionServiceClient is the client API for ConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionServiceClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...rpc.CallOption) (*ConnectResponse, error)
	Bind(ctx context.Context, in *BindRequest, opts ...rpc.CallOption) (*BindResponse, error)
	Echo(ctx context.Context, in *EchoRequest, opts ...rpc.CallOption) (*EchoResponse, error)
	ForceDisconnect(ctx context.Context, in *DisconnectNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	KeepAlive(ctx context.Context, in *protocol.NoData, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
	Encrypt(ctx context.Context, in *EncryptRequest, opts ...rpc.CallOption) (*protocol.NoData, error)
	RequestDisconnect(ctx context.Context, in *DisconnectRequest, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error)
}

type connectionServiceClient struct {
	cc rpc.ClientConnectionInterface
}

func NewConnectionServiceClient(cc rpc.ClientConnectionInterface) ConnectionServiceClient {
	return &connectionServiceClient{cc}
}

func (c *connectionServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...rpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, ConnectionService_Connect_FullMethodName, 0x65446991, 1, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) Bind(ctx context.Context, in *BindRequest, opts ...rpc.CallOption) (*BindResponse, error) {
	out := new(BindResponse)
	err := c.cc.Invoke(ctx, ConnectionService_Bind_FullMethodName, 0x65446991, 2, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...rpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, ConnectionService_Echo_FullMethodName, 0x65446991, 3, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) ForceDisconnect(ctx context.Context, in *DisconnectNotification, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, ConnectionService_ForceDisconnect_FullMethodName, 0x65446991, 4, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) KeepAlive(ctx context.Context, in *protocol.NoData, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, ConnectionService_KeepAlive_FullMethodName, 0x65446991, 5, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) Encrypt(ctx context.Context, in *EncryptRequest, opts ...rpc.CallOption) (*protocol.NoData, error) {
	out := new(protocol.NoData)
	err := c.cc.Invoke(ctx, ConnectionService_Encrypt_FullMethodName, 0x65446991, 6, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) RequestDisconnect(ctx context.Context, in *DisconnectRequest, opts ...rpc.CallOption) (*protocol.NO_RESPONSE, error) {
	out := new(protocol.NO_RESPONSE)
	err := c.cc.Invoke(ctx, ConnectionService_RequestDisconnect_FullMethodName, 0x65446991, 7, false, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionServiceServer is the server API for ConnectionService service.
// All implementations must embed UnimplementedConnectionServiceServer
// for forward compatibility
type ConnectionServiceServer interface {
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	Bind(context.Context, *BindRequest) (*BindResponse, error)
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	ForceDisconnect(context.Context, *DisconnectNotification) (*protocol.NO_RESPONSE, error)
	KeepAlive(context.Context, *protocol.NoData) (*protocol.NO_RESPONSE, error)
	Encrypt(context.Context, *EncryptRequest) (*protocol.NoData, error)
	RequestDisconnect(context.Context, *DisconnectRequest) (*protocol.NO_RESPONSE, error)
	mustEmbedUnimplementedConnectionServiceServer()
}

// UnimplementedConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnectionServiceServer struct {
}

func (UnimplementedConnectionServiceServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Connect not implemented")
}
func (UnimplementedConnectionServiceServer) Bind(context.Context, *BindRequest) (*BindResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Bind not implemented")
}
func (UnimplementedConnectionServiceServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Echo not implemented")
}
func (UnimplementedConnectionServiceServer) ForceDisconnect(context.Context, *DisconnectNotification) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method ForceDisconnect not implemented")
}
func (UnimplementedConnectionServiceServer) KeepAlive(context.Context, *protocol.NoData) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method KeepAlive not implemented")
}
func (UnimplementedConnectionServiceServer) Encrypt(context.Context, *EncryptRequest) (*protocol.NoData, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method Encrypt not implemented")
}
func (UnimplementedConnectionServiceServer) RequestDisconnect(context.Context, *DisconnectRequest) (*protocol.NO_RESPONSE, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method RequestDisconnect not implemented")
}
func (UnimplementedConnectionServiceServer) mustEmbedUnimplementedConnectionServiceServer() {}

// UnsafeConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionServiceServer will
// result in compilation errors.
type UnsafeConnectionServiceServer interface {
	mustEmbedUnimplementedConnectionServiceServer()
}

func RegisterConnectionServiceServer(s rpc.ServiceRegistrar, srv ConnectionServiceServer) {
	s.RegisterService(&ConnectionService_ServiceDesc, srv)
}

func _ConnectionService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Connect(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Bind(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_Bind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Bind(ctx, req.(*BindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Echo(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_ForceDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).ForceDisconnect(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_ForceDisconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).ForceDisconnect(ctx, req.(*DisconnectNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.NoData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).KeepAlive(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_KeepAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).KeepAlive(ctx, req.(*protocol.NoData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Encrypt(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_Encrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Encrypt(ctx, req.(*EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_RequestDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).RequestDisconnect(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_RequestDisconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).RequestDisconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectionService_ServiceDesc is the rpc.ServiceDesc for ConnectionService service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionService_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0x65446991,
	ServiceName: "bgs.protocol.connection.v1.ConnectionService",
	HandlerType: (*ConnectionServiceServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "Connect",
			MethodId:   1,
			NoResponse: false,
			Handler:    _ConnectionService_Connect_Handler,
		},
		{
			MethodName: "Bind",
			MethodId:   2,
			NoResponse: false,
			Handler:    _ConnectionService_Bind_Handler,
		},
		{
			MethodName: "Echo",
			MethodId:   3,
			NoResponse: false,
			Handler:    _ConnectionService_Echo_Handler,
		},
		{
			MethodName: "ForceDisconnect",
			MethodId:   4,
			NoResponse: true,
			Handler:    _ConnectionService_ForceDisconnect_Handler,
		},
		{
			MethodName: "KeepAlive",
			MethodId:   5,
			NoResponse: true,
			Handler:    _ConnectionService_KeepAlive_Handler,
		},
		{
			MethodName: "Encrypt",
			MethodId:   6,
			NoResponse: false,
			Handler:    _ConnectionService_Encrypt_Handler,
		},
		{
			MethodName: "RequestDisconnect",
			MethodId:   7,
			NoResponse: true,
			Handler:    _ConnectionService_RequestDisconnect_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/connection_service.proto",
}

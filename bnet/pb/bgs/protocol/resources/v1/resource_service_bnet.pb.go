// DO NOT EDIT: this file was auto-generated by Gophercraft/protoss

// Code generated by protoc-gen-go-bnet. DO NOT EDIT.
// versions:
// - protoc-gen-go-bnet v1.3.0
// - protoc             v4.25.2
// source: bgs/low/pb/client/resource_service.proto

package v1

import (
	context "context"
	protocol "github.com/Gophercraft/core/bnet/pb/bgs/protocol"
	rpc "github.com/Gophercraft/core/bnet/rpc"
	codes "github.com/Gophercraft/core/bnet/rpc/codes"
	status "github.com/Gophercraft/core/bnet/rpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the bnet package it is being compiled against.
const _ = rpc.SupportPackageIsVersion1

const (
	ResourcesService_GetContentHandle_FullMethodName = "/bgs.protocol.resources.v1.ResourcesService/GetContentHandle"
	ResourcesService_GetTitleIcons_FullMethodName    = "/bgs.protocol.resources.v1.ResourcesService/GetTitleIcons"
)

// ResourcesServiceClient is the client API for ResourcesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcesServiceClient interface {
	GetContentHandle(ctx context.Context, in *ContentHandleRequest, opts ...rpc.CallOption) (*protocol.ContentHandle, error)
	GetTitleIcons(ctx context.Context, in *GetTitleIconsRequest, opts ...rpc.CallOption) (*GetTitleIconsResponse, error)
}

type resourcesServiceClient struct {
	cc rpc.ClientConnectionInterface
}

func NewResourcesServiceClient(cc rpc.ClientConnectionInterface) ResourcesServiceClient {
	return &resourcesServiceClient{cc}
}

func (c *resourcesServiceClient) GetContentHandle(ctx context.Context, in *ContentHandleRequest, opts ...rpc.CallOption) (*protocol.ContentHandle, error) {
	out := new(protocol.ContentHandle)
	err := c.cc.Invoke(ctx, ResourcesService_GetContentHandle_FullMethodName, 0xECBE75BA, 1, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesServiceClient) GetTitleIcons(ctx context.Context, in *GetTitleIconsRequest, opts ...rpc.CallOption) (*GetTitleIconsResponse, error) {
	out := new(GetTitleIconsResponse)
	err := c.cc.Invoke(ctx, ResourcesService_GetTitleIcons_FullMethodName, 0xECBE75BA, 2, true, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourcesServiceServer is the server API for ResourcesService service.
// All implementations must embed UnimplementedResourcesServiceServer
// for forward compatibility
type ResourcesServiceServer interface {
	GetContentHandle(context.Context, *ContentHandleRequest) (*protocol.ContentHandle, error)
	GetTitleIcons(context.Context, *GetTitleIconsRequest) (*GetTitleIconsResponse, error)
	mustEmbedUnimplementedResourcesServiceServer()
}

// UnimplementedResourcesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourcesServiceServer struct {
}

func (UnimplementedResourcesServiceServer) GetContentHandle(context.Context, *ContentHandleRequest) (*protocol.ContentHandle, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetContentHandle not implemented")
}
func (UnimplementedResourcesServiceServer) GetTitleIcons(context.Context, *GetTitleIconsRequest) (*GetTitleIconsResponse, error) {
	return nil, status.Errorf(codes.ERROR_RPC_NOT_IMPLEMENTED, "method GetTitleIcons not implemented")
}
func (UnimplementedResourcesServiceServer) mustEmbedUnimplementedResourcesServiceServer() {}

// UnsafeResourcesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcesServiceServer will
// result in compilation errors.
type UnsafeResourcesServiceServer interface {
	mustEmbedUnimplementedResourcesServiceServer()
}

func RegisterResourcesServiceServer(s rpc.ServiceRegistrar, srv ResourcesServiceServer) {
	s.RegisterService(&ResourcesService_ServiceDesc, srv)
}

func _ResourcesService_GetContentHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).GetContentHandle(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcesService_GetContentHandle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).GetContentHandle(ctx, req.(*ContentHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcesService_GetTitleIcons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitleIconsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).GetTitleIcons(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcesService_GetTitleIcons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).GetTitleIcons(ctx, req.(*GetTitleIconsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourcesService_ServiceDesc is the rpc.ServiceDesc for ResourcesService service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourcesService_ServiceDesc = rpc.ServiceDesc{
	ServiceHash: 0xECBE75BA,
	ServiceName: "bgs.protocol.resources.v1.ResourcesService",
	HandlerType: (*ResourcesServiceServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "GetContentHandle",
			MethodId:   1,
			NoResponse: false,
			Handler:    _ResourcesService_GetContentHandle_Handler,
		},
		{
			MethodName: "GetTitleIcons",
			MethodId:   2,
			NoResponse: false,
			Handler:    _ResourcesService_GetTitleIcons_Handler,
		},
	},
	Metadata: "bgs/low/pb/client/resource_service.proto",
}

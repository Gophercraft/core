// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: RealmList.proto

package realmlist

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RealmListTicketIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameAccountID     *uint32 `protobuf:"fixed32,1,req,name=gameAccountID" json:"gameAccountID,omitempty"`
	GameAccountRegion *uint32 `protobuf:"varint,2,req,name=gameAccountRegion" json:"gameAccountRegion,omitempty"`
}

func (x *RealmListTicketIdentity) Reset() {
	*x = RealmListTicketIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RealmList_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealmListTicketIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealmListTicketIdentity) ProtoMessage() {}

func (x *RealmListTicketIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_RealmList_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealmListTicketIdentity.ProtoReflect.Descriptor instead.
func (*RealmListTicketIdentity) Descriptor() ([]byte, []int) {
	return file_RealmList_proto_rawDescGZIP(), []int{0}
}

func (x *RealmListTicketIdentity) GetGameAccountID() uint32 {
	if x != nil && x.GameAccountID != nil {
		return *x.GameAccountID
	}
	return 0
}

func (x *RealmListTicketIdentity) GetGameAccountRegion() uint32 {
	if x != nil && x.GameAccountRegion != nil {
		return *x.GameAccountRegion
	}
	return 0
}

type ClientVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionMajor    *uint32 `protobuf:"varint,1,req,name=versionMajor" json:"versionMajor,omitempty"`
	VersionMinor    *uint32 `protobuf:"varint,2,req,name=versionMinor" json:"versionMinor,omitempty"`
	VersionRevision *uint32 `protobuf:"varint,3,req,name=versionRevision" json:"versionRevision,omitempty"`
	VersionBuild    *uint32 `protobuf:"fixed32,4,req,name=versionBuild" json:"versionBuild,omitempty"`
}

func (x *ClientVersion) Reset() {
	*x = ClientVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RealmList_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientVersion) ProtoMessage() {}

func (x *ClientVersion) ProtoReflect() protoreflect.Message {
	mi := &file_RealmList_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientVersion.ProtoReflect.Descriptor instead.
func (*ClientVersion) Descriptor() ([]byte, []int) {
	return file_RealmList_proto_rawDescGZIP(), []int{1}
}

func (x *ClientVersion) GetVersionMajor() uint32 {
	if x != nil && x.VersionMajor != nil {
		return *x.VersionMajor
	}
	return 0
}

func (x *ClientVersion) GetVersionMinor() uint32 {
	if x != nil && x.VersionMinor != nil {
		return *x.VersionMinor
	}
	return 0
}

func (x *ClientVersion) GetVersionRevision() uint32 {
	if x != nil && x.VersionRevision != nil {
		return *x.VersionRevision
	}
	return 0
}

func (x *ClientVersion) GetVersionBuild() uint32 {
	if x != nil && x.VersionBuild != nil {
		return *x.VersionBuild
	}
	return 0
}

type ClientInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform         *uint32        `protobuf:"fixed32,1,req,name=platform" json:"platform,omitempty"`
	BuildVariant     *string        `protobuf:"bytes,2,req,name=buildVariant" json:"buildVariant,omitempty"`
	Type             *uint32        `protobuf:"fixed32,3,req,name=type" json:"type,omitempty"`
	TimeZone         *string        `protobuf:"bytes,4,req,name=timeZone" json:"timeZone,omitempty"`
	CurrentTime      *uint32        `protobuf:"varint,5,req,name=currentTime" json:"currentTime,omitempty"`
	TextLocale       *uint32        `protobuf:"fixed32,6,req,name=textLocale" json:"textLocale,omitempty"`
	AudioLocale      *uint32        `protobuf:"fixed32,7,req,name=audioLocale" json:"audioLocale,omitempty"`
	VersionDataBuild *uint32        `protobuf:"fixed32,8,req,name=versionDataBuild" json:"versionDataBuild,omitempty"`
	Version          *ClientVersion `protobuf:"bytes,9,req,name=version" json:"version,omitempty"`
	Secret           []byte         `protobuf:"bytes,10,req,name=secret" json:"secret,omitempty"`
	ClientArch       *uint32        `protobuf:"fixed32,11,req,name=clientArch" json:"clientArch,omitempty"`
	SystemVersion    *string        `protobuf:"bytes,12,req,name=systemVersion" json:"systemVersion,omitempty"`
	PlatformType     *uint32        `protobuf:"fixed32,13,req,name=platformType" json:"platformType,omitempty"`
	SystemArch       *uint32        `protobuf:"fixed32,14,req,name=systemArch" json:"systemArch,omitempty"`
}

func (x *ClientInformation) Reset() {
	*x = ClientInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RealmList_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInformation) ProtoMessage() {}

func (x *ClientInformation) ProtoReflect() protoreflect.Message {
	mi := &file_RealmList_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInformation.ProtoReflect.Descriptor instead.
func (*ClientInformation) Descriptor() ([]byte, []int) {
	return file_RealmList_proto_rawDescGZIP(), []int{2}
}

func (x *ClientInformation) GetPlatform() uint32 {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return 0
}

func (x *ClientInformation) GetBuildVariant() string {
	if x != nil && x.BuildVariant != nil {
		return *x.BuildVariant
	}
	return ""
}

func (x *ClientInformation) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ClientInformation) GetTimeZone() string {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return ""
}

func (x *ClientInformation) GetCurrentTime() uint32 {
	if x != nil && x.CurrentTime != nil {
		return *x.CurrentTime
	}
	return 0
}

func (x *ClientInformation) GetTextLocale() uint32 {
	if x != nil && x.TextLocale != nil {
		return *x.TextLocale
	}
	return 0
}

func (x *ClientInformation) GetAudioLocale() uint32 {
	if x != nil && x.AudioLocale != nil {
		return *x.AudioLocale
	}
	return 0
}

func (x *ClientInformation) GetVersionDataBuild() uint32 {
	if x != nil && x.VersionDataBuild != nil {
		return *x.VersionDataBuild
	}
	return 0
}

func (x *ClientInformation) GetVersion() *ClientVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ClientInformation) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *ClientInformation) GetClientArch() uint32 {
	if x != nil && x.ClientArch != nil {
		return *x.ClientArch
	}
	return 0
}

func (x *ClientInformation) GetSystemVersion() string {
	if x != nil && x.SystemVersion != nil {
		return *x.SystemVersion
	}
	return ""
}

func (x *ClientInformation) GetPlatformType() uint32 {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return 0
}

func (x *ClientInformation) GetSystemArch() uint32 {
	if x != nil && x.SystemArch != nil {
		return *x.SystemArch
	}
	return 0
}

type RealmListTicketClientInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ClientInformation `protobuf:"bytes,1,req,name=info" json:"info,omitempty"`
}

func (x *RealmListTicketClientInformation) Reset() {
	*x = RealmListTicketClientInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RealmList_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealmListTicketClientInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealmListTicketClientInformation) ProtoMessage() {}

func (x *RealmListTicketClientInformation) ProtoReflect() protoreflect.Message {
	mi := &file_RealmList_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealmListTicketClientInformation.ProtoReflect.Descriptor instead.
func (*RealmListTicketClientInformation) Descriptor() ([]byte, []int) {
	return file_RealmList_proto_rawDescGZIP(), []int{3}
}

func (x *RealmListTicketClientInformation) GetInfo() *ClientInformation {
	if x != nil {
		return x.Info
	}
	return nil
}

type RealmCharacterCountEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WowRealmAddress *uint32 `protobuf:"fixed32,1,req,name=wowRealmAddress" json:"wowRealmAddress,omitempty"`
	Count           *uint32 `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
}

func (x *RealmCharacterCountEntry) Reset() {
	*x = RealmCharacterCountEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RealmList_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealmCharacterCountEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealmCharacterCountEntry) ProtoMessage() {}

func (x *RealmCharacterCountEntry) ProtoReflect() protoreflect.Message {
	mi := &file_RealmList_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealmCharacterCountEntry.ProtoReflect.Descriptor instead.
func (*RealmCharacterCountEntry) Descriptor() ([]byte, []int) {
	return file_RealmList_proto_rawDescGZIP(), []int{4}
}

func (x *RealmCharacterCountEntry) GetWowRealmAddress() uint32 {
	if x != nil && x.WowRealmAddress != nil {
		return *x.WowRealmAddress
	}
	return 0
}

func (x *RealmCharacterCountEntry) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type RealmCharacterCountList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counts []*RealmCharacterCountEntry `protobuf:"bytes,1,rep,name=counts" json:"counts,omitempty"`
}

func (x *RealmCharacterCountList) Reset() {
	*x = RealmCharacterCountList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RealmList_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealmCharacterCountList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealmCharacterCountList) ProtoMessage() {}

func (x *RealmCharacterCountList) ProtoReflect() protoreflect.Message {
	mi := &file_RealmList_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealmCharacterCountList.ProtoReflect.Descriptor instead.
func (*RealmCharacterCountList) Descriptor() ([]byte, []int) {
	return file_RealmList_proto_rawDescGZIP(), []int{5}
}

func (x *RealmCharacterCountList) GetCounts() []*RealmCharacterCountEntry {
	if x != nil {
		return x.Counts
	}
	return nil
}

type RealmEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WowRealmAddress *uint32        `protobuf:"fixed32,1,req,name=wowRealmAddress" json:"wowRealmAddress,omitempty"`
	CfgTimezonesID  *uint32        `protobuf:"varint,2,req,name=cfgTimezonesID" json:"cfgTimezonesID,omitempty"`
	PopulationState *uint32        `protobuf:"varint,3,req,name=populationState" json:"populationState,omitempty"`
	CfgCategoriesID *uint32        `protobuf:"varint,4,req,name=cfgCategoriesID" json:"cfgCategoriesID,omitempty"`
	Version         *ClientVersion `protobuf:"bytes,5,req,name=version" json:"version,omitempty"`
	CfgRealmsID     *uint32        `protobuf:"varint,6,req,name=cfgRealmsID" json:"cfgRealmsID,omitempty"`
	Flags           *uint32        `protobuf:"varint,7,req,name=flags" json:"flags,omitempty"`
	Name            *string        `protobuf:"bytes,8,req,name=name" json:"name,omitempty"`
	CfgConfigsID    *uint32        `protobuf:"varint,9,req,name=cfgConfigsID" json:"cfgConfigsID,omitempty"`
	CfgLanguagesID  *uint32        `protobuf:"varint,10,req,name=cfgLanguagesID" json:"cfgLanguagesID,omitempty"`
}

func (x *RealmEntry) Reset() {
	*x = RealmEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RealmList_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealmEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealmEntry) ProtoMessage() {}

func (x *RealmEntry) ProtoReflect() protoreflect.Message {
	mi := &file_RealmList_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealmEntry.ProtoReflect.Descriptor instead.
func (*RealmEntry) Descriptor() ([]byte, []int) {
	return file_RealmList_proto_rawDescGZIP(), []int{6}
}

func (x *RealmEntry) GetWowRealmAddress() uint32 {
	if x != nil && x.WowRealmAddress != nil {
		return *x.WowRealmAddress
	}
	return 0
}

func (x *RealmEntry) GetCfgTimezonesID() uint32 {
	if x != nil && x.CfgTimezonesID != nil {
		return *x.CfgTimezonesID
	}
	return 0
}

func (x *RealmEntry) GetPopulationState() uint32 {
	if x != nil && x.PopulationState != nil {
		return *x.PopulationState
	}
	return 0
}

func (x *RealmEntry) GetCfgCategoriesID() uint32 {
	if x != nil && x.CfgCategoriesID != nil {
		return *x.CfgCategoriesID
	}
	return 0
}

func (x *RealmEntry) GetVersion() *ClientVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *RealmEntry) GetCfgRealmsID() uint32 {
	if x != nil && x.CfgRealmsID != nil {
		return *x.CfgRealmsID
	}
	return 0
}

func (x *RealmEntry) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *RealmEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RealmEntry) GetCfgConfigsID() uint32 {
	if x != nil && x.CfgConfigsID != nil {
		return *x.CfgConfigsID
	}
	return 0
}

func (x *RealmEntry) GetCfgLanguagesID() uint32 {
	if x != nil && x.CfgLanguagesID != nil {
		return *x.CfgLanguagesID
	}
	return 0
}

type RealmState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update   *RealmEntry `protobuf:"bytes,1,opt,name=update" json:"update,omitempty"`
	Deleting *bool       `protobuf:"varint,2,req,name=deleting" json:"deleting,omitempty"`
}

func (x *RealmState) Reset() {
	*x = RealmState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RealmList_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealmState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealmState) ProtoMessage() {}

func (x *RealmState) ProtoReflect() protoreflect.Message {
	mi := &file_RealmList_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealmState.ProtoReflect.Descriptor instead.
func (*RealmState) Descriptor() ([]byte, []int) {
	return file_RealmList_proto_rawDescGZIP(), []int{7}
}

func (x *RealmState) GetUpdate() *RealmEntry {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *RealmState) GetDeleting() bool {
	if x != nil && x.Deleting != nil {
		return *x.Deleting
	}
	return false
}

type RealmListUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*RealmState `protobuf:"bytes,1,rep,name=updates" json:"updates,omitempty"`
}

func (x *RealmListUpdates) Reset() {
	*x = RealmListUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RealmList_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealmListUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealmListUpdates) ProtoMessage() {}

func (x *RealmListUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_RealmList_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealmListUpdates.ProtoReflect.Descriptor instead.
func (*RealmListUpdates) Descriptor() ([]byte, []int) {
	return file_RealmList_proto_rawDescGZIP(), []int{8}
}

func (x *RealmListUpdates) GetUpdates() []*RealmState {
	if x != nil {
		return x.Updates
	}
	return nil
}

type IPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   *string `protobuf:"bytes,1,req,name=ip" json:"ip,omitempty"`
	Port *uint32 `protobuf:"varint,2,req,name=port" json:"port,omitempty"`
}

func (x *IPAddress) Reset() {
	*x = IPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RealmList_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAddress) ProtoMessage() {}

func (x *IPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_RealmList_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAddress.ProtoReflect.Descriptor instead.
func (*IPAddress) Descriptor() ([]byte, []int) {
	return file_RealmList_proto_rawDescGZIP(), []int{9}
}

func (x *IPAddress) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *IPAddress) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type RealmIPAddressFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family    *uint32      `protobuf:"varint,1,req,name=family" json:"family,omitempty"`
	Addresses []*IPAddress `protobuf:"bytes,2,rep,name=addresses" json:"addresses,omitempty"`
}

func (x *RealmIPAddressFamily) Reset() {
	*x = RealmIPAddressFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RealmList_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealmIPAddressFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealmIPAddressFamily) ProtoMessage() {}

func (x *RealmIPAddressFamily) ProtoReflect() protoreflect.Message {
	mi := &file_RealmList_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealmIPAddressFamily.ProtoReflect.Descriptor instead.
func (*RealmIPAddressFamily) Descriptor() ([]byte, []int) {
	return file_RealmList_proto_rawDescGZIP(), []int{10}
}

func (x *RealmIPAddressFamily) GetFamily() uint32 {
	if x != nil && x.Family != nil {
		return *x.Family
	}
	return 0
}

func (x *RealmIPAddressFamily) GetAddresses() []*IPAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type RealmListServerIPAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Families []*RealmIPAddressFamily `protobuf:"bytes,1,rep,name=families" json:"families,omitempty"`
}

func (x *RealmListServerIPAddresses) Reset() {
	*x = RealmListServerIPAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RealmList_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealmListServerIPAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealmListServerIPAddresses) ProtoMessage() {}

func (x *RealmListServerIPAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_RealmList_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealmListServerIPAddresses.ProtoReflect.Descriptor instead.
func (*RealmListServerIPAddresses) Descriptor() ([]byte, []int) {
	return file_RealmList_proto_rawDescGZIP(), []int{11}
}

func (x *RealmListServerIPAddresses) GetFamilies() []*RealmIPAddressFamily {
	if x != nil {
		return x.Families
	}
	return nil
}

var File_RealmList_proto protoreflect.FileDescriptor

var file_RealmList_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0e, 0x4a, 0x53, 0x4f, 0x4e, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x6d, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x67, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x07, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x11, 0x67,
	0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6a,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x07, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x22, 0xee, 0x03, 0x0a, 0x11, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x07,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x07, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x07, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x02, 0x28, 0x07, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x02, 0x28, 0x07, 0x52, 0x10, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x37,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x18, 0x0b, 0x20,
	0x02, 0x28, 0x07, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x07, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x41, 0x72, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x07, 0x52, 0x0a, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x72, 0x63, 0x68, 0x22, 0x59, 0x0a, 0x20, 0x52, 0x65, 0x61,
	0x6c, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4a, 0x53,
	0x4f, 0x4e, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x77, 0x6f, 0x77, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x07, 0x52, 0x0f, 0x77, 0x6f, 0x77, 0x52, 0x65,
	0x61, 0x6c, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x5b, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4a, 0x53,
	0x4f, 0x4e, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61,
	0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x83, 0x03,
	0x0a, 0x0a, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f,
	0x77, 0x6f, 0x77, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x07, 0x52, 0x0f, 0x77, 0x6f, 0x77, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x66, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e,
	0x63, 0x66, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x66, 0x67, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x49, 0x44, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0f, 0x63, 0x66, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x49, 0x44, 0x12, 0x37, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x66, 0x67, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x44, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x66, 0x67, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x66, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x49, 0x44, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x66, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x66, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x66, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x48, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x2e, 0x52, 0x65,
	0x61, 0x6c, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x67, 0x0a, 0x14,
	0x52, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x2e, 0x52, 0x65, 0x61,
	0x6c, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x08, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x69, 0x65, 0x73, 0x42, 0x31, 0x48, 0x02, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x63, 0x72, 0x61, 0x66,
	0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x62, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x62, 0x2f, 0x72,
	0x65, 0x61, 0x6c, 0x6d, 0x6c, 0x69, 0x73, 0x74,
}

var (
	file_RealmList_proto_rawDescOnce sync.Once
	file_RealmList_proto_rawDescData = file_RealmList_proto_rawDesc
)

func file_RealmList_proto_rawDescGZIP() []byte {
	file_RealmList_proto_rawDescOnce.Do(func() {
		file_RealmList_proto_rawDescData = protoimpl.X.CompressGZIP(file_RealmList_proto_rawDescData)
	})
	return file_RealmList_proto_rawDescData
}

var file_RealmList_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_RealmList_proto_goTypes = []interface{}{
	(*RealmListTicketIdentity)(nil),          // 0: JSON.RealmList.RealmListTicketIdentity
	(*ClientVersion)(nil),                    // 1: JSON.RealmList.ClientVersion
	(*ClientInformation)(nil),                // 2: JSON.RealmList.ClientInformation
	(*RealmListTicketClientInformation)(nil), // 3: JSON.RealmList.RealmListTicketClientInformation
	(*RealmCharacterCountEntry)(nil),         // 4: JSON.RealmList.RealmCharacterCountEntry
	(*RealmCharacterCountList)(nil),          // 5: JSON.RealmList.RealmCharacterCountList
	(*RealmEntry)(nil),                       // 6: JSON.RealmList.RealmEntry
	(*RealmState)(nil),                       // 7: JSON.RealmList.RealmState
	(*RealmListUpdates)(nil),                 // 8: JSON.RealmList.RealmListUpdates
	(*IPAddress)(nil),                        // 9: JSON.RealmList.IPAddress
	(*RealmIPAddressFamily)(nil),             // 10: JSON.RealmList.RealmIPAddressFamily
	(*RealmListServerIPAddresses)(nil),       // 11: JSON.RealmList.RealmListServerIPAddresses
}
var file_RealmList_proto_depIdxs = []int32{
	1,  // 0: JSON.RealmList.ClientInformation.version:type_name -> JSON.RealmList.ClientVersion
	2,  // 1: JSON.RealmList.RealmListTicketClientInformation.info:type_name -> JSON.RealmList.ClientInformation
	4,  // 2: JSON.RealmList.RealmCharacterCountList.counts:type_name -> JSON.RealmList.RealmCharacterCountEntry
	1,  // 3: JSON.RealmList.RealmEntry.version:type_name -> JSON.RealmList.ClientVersion
	6,  // 4: JSON.RealmList.RealmState.update:type_name -> JSON.RealmList.RealmEntry
	7,  // 5: JSON.RealmList.RealmListUpdates.updates:type_name -> JSON.RealmList.RealmState
	9,  // 6: JSON.RealmList.RealmIPAddressFamily.addresses:type_name -> JSON.RealmList.IPAddress
	10, // 7: JSON.RealmList.RealmListServerIPAddresses.families:type_name -> JSON.RealmList.RealmIPAddressFamily
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_RealmList_proto_init() }
func file_RealmList_proto_init() {
	if File_RealmList_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_RealmList_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealmListTicketIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RealmList_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RealmList_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RealmList_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealmListTicketClientInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RealmList_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealmCharacterCountEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RealmList_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealmCharacterCountList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RealmList_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealmEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RealmList_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealmState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RealmList_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealmListUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RealmList_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RealmList_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealmIPAddressFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RealmList_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealmListServerIPAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RealmList_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RealmList_proto_goTypes,
		DependencyIndexes: file_RealmList_proto_depIdxs,
		MessageInfos:      file_RealmList_proto_msgTypes,
	}.Build()
	File_RealmList_proto = out.File
	file_RealmList_proto_rawDesc = nil
	file_RealmList_proto_goTypes = nil
	file_RealmList_proto_depIdxs = nil
}

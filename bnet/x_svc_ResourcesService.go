// generated by protoc-gen-gcraft : DO NOT EDIT
package bnet

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	protocol "github.com/Gophercraft/core/bnet/bgs/protocol"
	v1 "github.com/Gophercraft/core/bnet/bgs/protocol/resources/v1"
	math "math"
)

// shut the compiler up
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = protocol.E_MethodOptions

const ResourcesServiceHash = 0xECBE75BA

type ResourcesService interface {
	GetContentHandle(*Conn, uint32, *v1.ContentHandleRequest)
}

func DispatchResourcesService(conn *Conn, svc ResourcesService, token uint32, method uint32, data []byte) error {
	switch method {
	case 1:
		var args v1.ContentHandleRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.GetContentHandle(conn, token, &args)
	}
	return nil
}

type EmptyResourcesService struct{}

func (e EmptyResourcesService) GetContentHandle(conn *Conn, token uint32, args *v1.ContentHandleRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}

func (c *Conn) ResourcesService_Request_GetContentHandle(args *v1.ContentHandleRequest) (*protocol.ContentHandle, error) {
	header, bytes, err := c.Request(ResourcesServiceHash, 1, args)
	if err != nil {
		return nil, err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return nil, fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	var out protocol.ContentHandle
	err = proto.Unmarshal(bytes, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

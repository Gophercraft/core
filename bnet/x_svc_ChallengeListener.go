// generated by protoc-gen-gcraft : DO NOT EDIT
package bnet

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	protocol "github.com/Gophercraft/core/bnet/bgs/protocol"
	v1 "github.com/Gophercraft/core/bnet/bgs/protocol/challenge/v1"
	math "math"
)

// shut the compiler up
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = protocol.E_MethodOptions

const ChallengeListenerHash = 0xBBDA171F

type ChallengeListener interface {
	OnExternalChallenge(*Conn, uint32, *v1.ChallengeExternalRequest)
	OnExternalChallengeResult(*Conn, uint32, *v1.ChallengeExternalResult)
}

func DispatchChallengeListener(conn *Conn, svc ChallengeListener, token uint32, method uint32, data []byte) error {
	switch method {
	case 3:
		var args v1.ChallengeExternalRequest
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.OnExternalChallenge(conn, token, &args)
	case 4:
		var args v1.ChallengeExternalResult
		err := proto.Unmarshal(data, &args)
		if err != nil {
			return err
		}
		svc.OnExternalChallengeResult(conn, token, &args)
	}
	return nil
}

type EmptyChallengeListener struct{}

func (e EmptyChallengeListener) OnExternalChallenge(conn *Conn, token uint32, args *v1.ChallengeExternalRequest) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}
func (e EmptyChallengeListener) OnExternalChallengeResult(conn *Conn, token uint32, args *v1.ChallengeExternalResult) {
	conn.SendResponseCode(token, ERROR_RPC_NOT_IMPLEMENTED)
}

func (c *Conn) ChallengeListener_Request_OnExternalChallenge(args *v1.ChallengeExternalRequest) error {
	header, _, err := c.Request(ChallengeListenerHash, 3, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

func (c *Conn) ChallengeListener_Request_OnExternalChallengeResult(args *v1.ChallengeExternalResult) error {
	header, _, err := c.Request(ChallengeListenerHash, 4, args)
	if err != nil {
		return err
	}
	if Status(header.GetStatus()) != ERROR_OK {
		return fmt.Errorf("bnet: non-ok status 0x%08X", header.GetStatus())
	}
	return nil
}

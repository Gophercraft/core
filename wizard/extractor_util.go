package wizard

import (
	"errors"
	"fmt"
	"os"
	"path/filepath"
	"time"

	"github.com/Gophercraft/core/datapack"
)

const exAuthor = "Gophercraft Wizard"

func pathExists(p string) bool {
	if _, err := os.Stat(p); errors.Is(err, os.ErrNotExist) {
		return false
	}
	return true
}

func (ex *Extractor) packExists(name string) bool {
	return pathExists(filepath.Join(ex.Dir, name))
}

func (ex *Extractor) removePack(name string) error {
	return os.RemoveAll(filepath.Join(ex.Dir, name))
}

func (ex *Extractor) AuthorPack(name string, config *datapack.PackInfo) (pack *datapack.Creator, err error) {
	ex.removePack(name)

	dir := filepath.Join(ex.Dir, name)

	var creator *datapack.Creator

	creator, err = datapack.NewCreator(dir)
	if err != nil {
		return
	}

	err = creator.WritePackInfo(config)
	if err != nil {
		return
	}

	return
}

func (ex *Extractor) dependencies() []datapack.PackDependency {
	// no dependencies anymore
	return nil
}

func (ex *Extractor) generationNotice() string {
	return fmt.Sprintf(" from build %s. DO NOT EDIT OR REDISTRIBUTE. Generated by Gophercraft Wizard at %s.", ex.Source.Build(), time.Now().Format(time.RFC822Z))
}

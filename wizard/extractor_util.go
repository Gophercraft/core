package wizard

import (
	"errors"
	"fmt"
	"os"
	"path/filepath"
	"time"

	"github.com/Gophercraft/core/datapack"
	"github.com/Gophercraft/core/version"
)

const exAuthor = "Gophercraft Wizard"

func pathExists(p string) bool {
	if _, err := os.Stat(p); errors.Is(err, os.ErrNotExist) {
		return false
	}
	return true
}

func (ex *Extractor) packExists(name string) bool {
	return pathExists(filepath.Join(ex.Dir, name))
}

func (ex *Extractor) removePack(name string) error {
	return os.RemoveAll(filepath.Join(ex.Dir, name))
}

func (ex *Extractor) AuthorPack(name string, cfg datapack.PackConfig) (*datapack.Pack, error) {
	ex.removePack(name)

	dir := filepath.Join(ex.Dir, name)

	return datapack.AuthorDir(dir, cfg)
}

func (ex *Extractor) dependencies() []string {
	return []string{
		"Gophercraft Core " + version.GophercraftVersion.String(),
		fmt.Sprintf("Running build %d", ex.Source.Build()),
	}
}

func (ex *Extractor) generationNotice() string {
	return fmt.Sprintf(" from build %s. DO NOT EDIT OR REDISTRIBUTE. Generated by Gophercraft Wizard at %s.", ex.Source.Build(), time.Now())
}

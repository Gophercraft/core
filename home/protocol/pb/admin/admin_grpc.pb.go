// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	// Actions that govern the entire server
	TakeBackup(ctx context.Context, in *TakeBackupRequest, opts ...grpc.CallOption) (AdminService_TakeBackupClient, error)
	// Actions that govern an entire account (username/password)
	BanAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BanStatus, error)
	UnbanAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BanStatus, error)
	SuspendAccount(ctx context.Context, in *SuspendAccountRequest, opts ...grpc.CallOption) (*BanStatus, error)
	UnsuspendAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BanStatus, error)
	LockAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*LockStatus, error)
	UnlockAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*LockStatus, error)
	// Actions that govern only a specific game account (game profile that is the child of a parent account)
	BanGameAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BanStatus, error)
	UnbanGameAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BanStatus, error)
	SuspendGameAccount(ctx context.Context, in *SuspendAccountRequest, opts ...grpc.CallOption) (*BanStatus, error)
	UnsuspendGameAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BanStatus, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) TakeBackup(ctx context.Context, in *TakeBackupRequest, opts ...grpc.CallOption) (AdminService_TakeBackupClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[0], "/admin.AdminService/TakeBackup", opts...)
	if err != nil {
		return nil, err
	}
	x := &adminServiceTakeBackupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminService_TakeBackupClient interface {
	Recv() (*FileDownload, error)
	grpc.ClientStream
}

type adminServiceTakeBackupClient struct {
	grpc.ClientStream
}

func (x *adminServiceTakeBackupClient) Recv() (*FileDownload, error) {
	m := new(FileDownload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminServiceClient) BanAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BanStatus, error) {
	out := new(BanStatus)
	err := c.cc.Invoke(ctx, "/admin.AdminService/BanAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UnbanAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BanStatus, error) {
	out := new(BanStatus)
	err := c.cc.Invoke(ctx, "/admin.AdminService/UnbanAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SuspendAccount(ctx context.Context, in *SuspendAccountRequest, opts ...grpc.CallOption) (*BanStatus, error) {
	out := new(BanStatus)
	err := c.cc.Invoke(ctx, "/admin.AdminService/SuspendAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UnsuspendAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BanStatus, error) {
	out := new(BanStatus)
	err := c.cc.Invoke(ctx, "/admin.AdminService/UnsuspendAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) LockAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*LockStatus, error) {
	out := new(LockStatus)
	err := c.cc.Invoke(ctx, "/admin.AdminService/LockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UnlockAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*LockStatus, error) {
	out := new(LockStatus)
	err := c.cc.Invoke(ctx, "/admin.AdminService/UnlockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) BanGameAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BanStatus, error) {
	out := new(BanStatus)
	err := c.cc.Invoke(ctx, "/admin.AdminService/BanGameAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UnbanGameAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BanStatus, error) {
	out := new(BanStatus)
	err := c.cc.Invoke(ctx, "/admin.AdminService/UnbanGameAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SuspendGameAccount(ctx context.Context, in *SuspendAccountRequest, opts ...grpc.CallOption) (*BanStatus, error) {
	out := new(BanStatus)
	err := c.cc.Invoke(ctx, "/admin.AdminService/SuspendGameAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UnsuspendGameAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BanStatus, error) {
	out := new(BanStatus)
	err := c.cc.Invoke(ctx, "/admin.AdminService/UnsuspendGameAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	// Actions that govern the entire server
	TakeBackup(*TakeBackupRequest, AdminService_TakeBackupServer) error
	// Actions that govern an entire account (username/password)
	BanAccount(context.Context, *AccountRequest) (*BanStatus, error)
	UnbanAccount(context.Context, *AccountRequest) (*BanStatus, error)
	SuspendAccount(context.Context, *SuspendAccountRequest) (*BanStatus, error)
	UnsuspendAccount(context.Context, *AccountRequest) (*BanStatus, error)
	LockAccount(context.Context, *AccountRequest) (*LockStatus, error)
	UnlockAccount(context.Context, *AccountRequest) (*LockStatus, error)
	// Actions that govern only a specific game account (game profile that is the child of a parent account)
	BanGameAccount(context.Context, *AccountRequest) (*BanStatus, error)
	UnbanGameAccount(context.Context, *AccountRequest) (*BanStatus, error)
	SuspendGameAccount(context.Context, *SuspendAccountRequest) (*BanStatus, error)
	UnsuspendGameAccount(context.Context, *AccountRequest) (*BanStatus, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) TakeBackup(*TakeBackupRequest, AdminService_TakeBackupServer) error {
	return status.Errorf(codes.Unimplemented, "method TakeBackup not implemented")
}
func (UnimplementedAdminServiceServer) BanAccount(context.Context, *AccountRequest) (*BanStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanAccount not implemented")
}
func (UnimplementedAdminServiceServer) UnbanAccount(context.Context, *AccountRequest) (*BanStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanAccount not implemented")
}
func (UnimplementedAdminServiceServer) SuspendAccount(context.Context, *SuspendAccountRequest) (*BanStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendAccount not implemented")
}
func (UnimplementedAdminServiceServer) UnsuspendAccount(context.Context, *AccountRequest) (*BanStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsuspendAccount not implemented")
}
func (UnimplementedAdminServiceServer) LockAccount(context.Context, *AccountRequest) (*LockStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockAccount not implemented")
}
func (UnimplementedAdminServiceServer) UnlockAccount(context.Context, *AccountRequest) (*LockStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockAccount not implemented")
}
func (UnimplementedAdminServiceServer) BanGameAccount(context.Context, *AccountRequest) (*BanStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanGameAccount not implemented")
}
func (UnimplementedAdminServiceServer) UnbanGameAccount(context.Context, *AccountRequest) (*BanStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanGameAccount not implemented")
}
func (UnimplementedAdminServiceServer) SuspendGameAccount(context.Context, *SuspendAccountRequest) (*BanStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendGameAccount not implemented")
}
func (UnimplementedAdminServiceServer) UnsuspendGameAccount(context.Context, *AccountRequest) (*BanStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsuspendGameAccount not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_TakeBackup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TakeBackupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).TakeBackup(m, &adminServiceTakeBackupServer{stream})
}

type AdminService_TakeBackupServer interface {
	Send(*FileDownload) error
	grpc.ServerStream
}

type adminServiceTakeBackupServer struct {
	grpc.ServerStream
}

func (x *adminServiceTakeBackupServer) Send(m *FileDownload) error {
	return x.ServerStream.SendMsg(m)
}

func _AdminService_BanAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).BanAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/BanAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).BanAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UnbanAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UnbanAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/UnbanAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UnbanAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SuspendAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SuspendAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/SuspendAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SuspendAccount(ctx, req.(*SuspendAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UnsuspendAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UnsuspendAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/UnsuspendAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UnsuspendAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_LockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).LockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/LockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).LockAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UnlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UnlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/UnlockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UnlockAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_BanGameAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).BanGameAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/BanGameAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).BanGameAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UnbanGameAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UnbanGameAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/UnbanGameAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UnbanGameAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SuspendGameAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SuspendGameAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/SuspendGameAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SuspendGameAccount(ctx, req.(*SuspendAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UnsuspendGameAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UnsuspendGameAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/UnsuspendGameAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UnsuspendGameAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BanAccount",
			Handler:    _AdminService_BanAccount_Handler,
		},
		{
			MethodName: "UnbanAccount",
			Handler:    _AdminService_UnbanAccount_Handler,
		},
		{
			MethodName: "SuspendAccount",
			Handler:    _AdminService_SuspendAccount_Handler,
		},
		{
			MethodName: "UnsuspendAccount",
			Handler:    _AdminService_UnsuspendAccount_Handler,
		},
		{
			MethodName: "LockAccount",
			Handler:    _AdminService_LockAccount_Handler,
		},
		{
			MethodName: "UnlockAccount",
			Handler:    _AdminService_UnlockAccount_Handler,
		},
		{
			MethodName: "BanGameAccount",
			Handler:    _AdminService_BanGameAccount_Handler,
		},
		{
			MethodName: "UnbanGameAccount",
			Handler:    _AdminService_UnbanGameAccount_Handler,
		},
		{
			MethodName: "SuspendGameAccount",
			Handler:    _AdminService_SuspendGameAccount_Handler,
		},
		{
			MethodName: "UnsuspendGameAccount",
			Handler:    _AdminService_UnsuspendGameAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TakeBackup",
			Handler:       _AdminService_TakeBackup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin.proto",
}

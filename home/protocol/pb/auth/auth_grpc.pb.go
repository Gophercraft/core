// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// Attempt to sign in with the given credentials
	// If unauthorized, the request will return an error
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Destroys the web token and prevents further use of it
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// Generate a login ticket
	GenerateLoginTicket(ctx context.Context, in *GenerateLoginTicketRequest, opts ...grpc.CallOption) (*GenerateLoginTicketResponse, error)
	// Checks the status of a credential
	GetCredentialStatus(ctx context.Context, in *CredentialStatusRequest, opts ...grpc.CallOption) (*CredentialStatus, error)
	GetTwoFactorAuthenticationMethods(ctx context.Context, in *TwoFactorAuthenticationMethodsRequest, opts ...grpc.CallOption) (*TwoFactorAuthenticationMethodsResponse, error)
	SendEmailAuthenticationCode(ctx context.Context, in *SendEmailAuthenticationCodeRequest, opts ...grpc.CallOption) (*SendEmailAuthenticationCodeResponse, error)
	// If token needs 2-factor authentication, use this method to submit the verification code
	AuthenticateCredential(ctx context.Context, in *CredentialAuthenticationRequest, opts ...grpc.CallOption) (*CredentialAuthenticationResponse, error)
	// Sent from world server to verify a client's attempt to connect there
	// this RPC will be rejected outright if the peer's fingerprint does not match the one on record for RealmID
	AuthenticateGameConnection(ctx context.Context, in *AuthenticateGameConnectionRequest, opts ...grpc.CallOption) (*AuthenticateGameConnectionResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateLoginTicket(ctx context.Context, in *GenerateLoginTicketRequest, opts ...grpc.CallOption) (*GenerateLoginTicketResponse, error) {
	out := new(GenerateLoginTicketResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GenerateLoginTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetCredentialStatus(ctx context.Context, in *CredentialStatusRequest, opts ...grpc.CallOption) (*CredentialStatus, error) {
	out := new(CredentialStatus)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GetCredentialStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetTwoFactorAuthenticationMethods(ctx context.Context, in *TwoFactorAuthenticationMethodsRequest, opts ...grpc.CallOption) (*TwoFactorAuthenticationMethodsResponse, error) {
	out := new(TwoFactorAuthenticationMethodsResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GetTwoFactorAuthenticationMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SendEmailAuthenticationCode(ctx context.Context, in *SendEmailAuthenticationCodeRequest, opts ...grpc.CallOption) (*SendEmailAuthenticationCodeResponse, error) {
	out := new(SendEmailAuthenticationCodeResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/SendEmailAuthenticationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthenticateCredential(ctx context.Context, in *CredentialAuthenticationRequest, opts ...grpc.CallOption) (*CredentialAuthenticationResponse, error) {
	out := new(CredentialAuthenticationResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/AuthenticateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthenticateGameConnection(ctx context.Context, in *AuthenticateGameConnectionRequest, opts ...grpc.CallOption) (*AuthenticateGameConnectionResponse, error) {
	out := new(AuthenticateGameConnectionResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/AuthenticateGameConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	// Attempt to sign in with the given credentials
	// If unauthorized, the request will return an error
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Destroys the web token and prevents further use of it
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// Generate a login ticket
	GenerateLoginTicket(context.Context, *GenerateLoginTicketRequest) (*GenerateLoginTicketResponse, error)
	// Checks the status of a credential
	GetCredentialStatus(context.Context, *CredentialStatusRequest) (*CredentialStatus, error)
	GetTwoFactorAuthenticationMethods(context.Context, *TwoFactorAuthenticationMethodsRequest) (*TwoFactorAuthenticationMethodsResponse, error)
	SendEmailAuthenticationCode(context.Context, *SendEmailAuthenticationCodeRequest) (*SendEmailAuthenticationCodeResponse, error)
	// If token needs 2-factor authentication, use this method to submit the verification code
	AuthenticateCredential(context.Context, *CredentialAuthenticationRequest) (*CredentialAuthenticationResponse, error)
	// Sent from world server to verify a client's attempt to connect there
	// this RPC will be rejected outright if the peer's fingerprint does not match the one on record for RealmID
	AuthenticateGameConnection(context.Context, *AuthenticateGameConnectionRequest) (*AuthenticateGameConnectionResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServiceServer) GenerateLoginTicket(context.Context, *GenerateLoginTicketRequest) (*GenerateLoginTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLoginTicket not implemented")
}
func (UnimplementedAuthServiceServer) GetCredentialStatus(context.Context, *CredentialStatusRequest) (*CredentialStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialStatus not implemented")
}
func (UnimplementedAuthServiceServer) GetTwoFactorAuthenticationMethods(context.Context, *TwoFactorAuthenticationMethodsRequest) (*TwoFactorAuthenticationMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwoFactorAuthenticationMethods not implemented")
}
func (UnimplementedAuthServiceServer) SendEmailAuthenticationCode(context.Context, *SendEmailAuthenticationCodeRequest) (*SendEmailAuthenticationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailAuthenticationCode not implemented")
}
func (UnimplementedAuthServiceServer) AuthenticateCredential(context.Context, *CredentialAuthenticationRequest) (*CredentialAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateCredential not implemented")
}
func (UnimplementedAuthServiceServer) AuthenticateGameConnection(context.Context, *AuthenticateGameConnectionRequest) (*AuthenticateGameConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateGameConnection not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateLoginTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateLoginTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateLoginTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GenerateLoginTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateLoginTicket(ctx, req.(*GenerateLoginTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetCredentialStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetCredentialStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetCredentialStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetCredentialStatus(ctx, req.(*CredentialStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetTwoFactorAuthenticationMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoFactorAuthenticationMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetTwoFactorAuthenticationMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetTwoFactorAuthenticationMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetTwoFactorAuthenticationMethods(ctx, req.(*TwoFactorAuthenticationMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SendEmailAuthenticationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailAuthenticationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SendEmailAuthenticationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/SendEmailAuthenticationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SendEmailAuthenticationCode(ctx, req.(*SendEmailAuthenticationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthenticateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthenticateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/AuthenticateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthenticateCredential(ctx, req.(*CredentialAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthenticateGameConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateGameConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthenticateGameConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/AuthenticateGameConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthenticateGameConnection(ctx, req.(*AuthenticateGameConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthService_Logout_Handler,
		},
		{
			MethodName: "GenerateLoginTicket",
			Handler:    _AuthService_GenerateLoginTicket_Handler,
		},
		{
			MethodName: "GetCredentialStatus",
			Handler:    _AuthService_GetCredentialStatus_Handler,
		},
		{
			MethodName: "GetTwoFactorAuthenticationMethods",
			Handler:    _AuthService_GetTwoFactorAuthenticationMethods_Handler,
		},
		{
			MethodName: "SendEmailAuthenticationCode",
			Handler:    _AuthService_SendEmailAuthenticationCode_Handler,
		},
		{
			MethodName: "AuthenticateCredential",
			Handler:    _AuthService_AuthenticateCredential_Handler,
		},
		{
			MethodName: "AuthenticateGameConnection",
			Handler:    _AuthService_AuthenticateGameConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

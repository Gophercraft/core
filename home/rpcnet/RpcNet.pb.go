// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: RpcNet.proto

package rpcnet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_OK                 Status = 0
	Status_Unauthorized       Status = 1
	Status_Offline            Status = 2
	Status_Disabled           Status = 3
	Status_Ratelimited        Status = 4
	Status_MaxResourceReached Status = 5
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "OK",
		1: "Unauthorized",
		2: "Offline",
		3: "Disabled",
		4: "Ratelimited",
		5: "MaxResourceReached",
	}
	Status_value = map[string]int32{
		"OK":                 0,
		"Unauthorized":       1,
		"Offline":            2,
		"Disabled":           3,
		"Ratelimited":        4,
		"MaxResourceReached": 5,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_RpcNet_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_RpcNet_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{0}
}

type Tier int32

const (
	Tier_NormalPlayer Tier = 0
	Tier_Privileged   Tier = 1
	Tier_GameMaster   Tier = 2
	Tier_Admin        Tier = 3
)

// Enum value maps for Tier.
var (
	Tier_name = map[int32]string{
		0: "NormalPlayer",
		1: "Privileged",
		2: "GameMaster",
		3: "Admin",
	}
	Tier_value = map[string]int32{
		"NormalPlayer": 0,
		"Privileged":   1,
		"GameMaster":   2,
		"Admin":        3,
	}
)

func (x Tier) Enum() *Tier {
	p := new(Tier)
	*p = x
	return p
}

func (x Tier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tier) Descriptor() protoreflect.EnumDescriptor {
	return file_RpcNet_proto_enumTypes[1].Descriptor()
}

func (Tier) Type() protoreflect.EnumType {
	return &file_RpcNet_proto_enumTypes[1]
}

func (x Tier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tier.Descriptor instead.
func (Tier) EnumDescriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{1}
}

type SupportDomain int32

const (
	SupportDomain_Other   SupportDomain = 0
	SupportDomain_Website SupportDomain = 1
	SupportDomain_Realm   SupportDomain = 2
)

// Enum value maps for SupportDomain.
var (
	SupportDomain_name = map[int32]string{
		0: "Other",
		1: "Website",
		2: "Realm",
	}
	SupportDomain_value = map[string]int32{
		"Other":   0,
		"Website": 1,
		"Realm":   2,
	}
)

func (x SupportDomain) Enum() *SupportDomain {
	p := new(SupportDomain)
	*p = x
	return p
}

func (x SupportDomain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupportDomain) Descriptor() protoreflect.EnumDescriptor {
	return file_RpcNet_proto_enumTypes[2].Descriptor()
}

func (SupportDomain) Type() protoreflect.EnumType {
	return &file_RpcNet_proto_enumTypes[2]
}

func (x SupportDomain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupportDomain.Descriptor instead.
func (SupportDomain) EnumDescriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{2}
}

type SupportType int32

const (
	SupportType_Suggestion SupportType = 0
	SupportType_BugReport  SupportType = 1
	SupportType_UserReport SupportType = 2
)

// Enum value maps for SupportType.
var (
	SupportType_name = map[int32]string{
		0: "Suggestion",
		1: "BugReport",
		2: "UserReport",
	}
	SupportType_value = map[string]int32{
		"Suggestion": 0,
		"BugReport":  1,
		"UserReport": 2,
	}
)

func (x SupportType) Enum() *SupportType {
	p := new(SupportType)
	*p = x
	return p
}

func (x SupportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupportType) Descriptor() protoreflect.EnumDescriptor {
	return file_RpcNet_proto_enumTypes[3].Descriptor()
}

func (SupportType) Type() protoreflect.EnumType {
	return &file_RpcNet_proto_enumTypes[3]
}

func (x SupportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupportType.Descriptor instead.
func (SupportType) EnumDescriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{3}
}

type StatusMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=Status,proto3,enum=Status" json:"Status,omitempty"`
}

func (x *StatusMsg) Reset() {
	*x = StatusMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusMsg) ProtoMessage() {}

func (x *StatusMsg) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusMsg.ProtoReflect.Descriptor instead.
func (*StatusMsg) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{0}
}

func (x *StatusMsg) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

type VersionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreVersion string `protobuf:"bytes,1,opt,name=CoreVersion,proto3" json:"CoreVersion,omitempty"`
}

func (x *VersionData) Reset() {
	*x = VersionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionData) ProtoMessage() {}

func (x *VersionData) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionData.ProtoReflect.Descriptor instead.
func (*VersionData) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{1}
}

func (x *VersionData) GetCoreVersion() string {
	if x != nil {
		return x.CoreVersion
	}
	return ""
}

type PingMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time uint64 `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (x *PingMsg) Reset() {
	*x = PingMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMsg) ProtoMessage() {}

func (x *PingMsg) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMsg.ProtoReflect.Descriptor instead.
func (*PingMsg) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{2}
}

func (x *PingMsg) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// Sent from realm to auth server upon a player connection.
type VerifyWorldQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealmID     uint64 `protobuf:"varint,1,opt,name=RealmID,proto3" json:"RealmID,omitempty"`
	Build       uint32 `protobuf:"varint,2,opt,name=Build,proto3" json:"Build,omitempty"`
	Account     string `protobuf:"bytes,3,opt,name=Account,proto3" json:"Account,omitempty"`
	IP          string `protobuf:"bytes,4,opt,name=IP,proto3" json:"IP,omitempty"`
	Digest      []byte `protobuf:"bytes,5,opt,name=Digest,proto3" json:"Digest,omitempty"`
	Seed        []byte `protobuf:"bytes,6,opt,name=Seed,proto3" json:"Seed,omitempty"`
	Salt        []byte `protobuf:"bytes,7,opt,name=Salt,proto3" json:"Salt,omitempty"`
	GameAccount string `protobuf:"bytes,8,opt,name=GameAccount,proto3" json:"GameAccount,omitempty"`
}

func (x *VerifyWorldQuery) Reset() {
	*x = VerifyWorldQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyWorldQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyWorldQuery) ProtoMessage() {}

func (x *VerifyWorldQuery) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyWorldQuery.ProtoReflect.Descriptor instead.
func (*VerifyWorldQuery) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{3}
}

func (x *VerifyWorldQuery) GetRealmID() uint64 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *VerifyWorldQuery) GetBuild() uint32 {
	if x != nil {
		return x.Build
	}
	return 0
}

func (x *VerifyWorldQuery) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *VerifyWorldQuery) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *VerifyWorldQuery) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *VerifyWorldQuery) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *VerifyWorldQuery) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *VerifyWorldQuery) GetGameAccount() string {
	if x != nil {
		return x.GameAccount
	}
	return ""
}

type VerifyWorldResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      Status `protobuf:"varint,1,opt,name=Status,proto3,enum=Status" json:"Status,omitempty"`
	Tier        Tier   `protobuf:"varint,2,opt,name=Tier,proto3,enum=Tier" json:"Tier,omitempty"`
	SessionKey  []byte `protobuf:"bytes,3,opt,name=SessionKey,proto3" json:"SessionKey,omitempty"`
	Account     uint64 `protobuf:"varint,4,opt,name=Account,proto3" json:"Account,omitempty"`
	GameAccount uint64 `protobuf:"varint,5,opt,name=GameAccount,proto3" json:"GameAccount,omitempty"`
	Locale      uint32 `protobuf:"varint,6,opt,name=Locale,proto3" json:"Locale,omitempty"`
}

func (x *VerifyWorldResponse) Reset() {
	*x = VerifyWorldResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyWorldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyWorldResponse) ProtoMessage() {}

func (x *VerifyWorldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyWorldResponse.ProtoReflect.Descriptor instead.
func (*VerifyWorldResponse) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{4}
}

func (x *VerifyWorldResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *VerifyWorldResponse) GetTier() Tier {
	if x != nil {
		return x.Tier
	}
	return Tier_NormalPlayer
}

func (x *VerifyWorldResponse) GetSessionKey() []byte {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *VerifyWorldResponse) GetAccount() uint64 {
	if x != nil {
		return x.Account
	}
	return 0
}

func (x *VerifyWorldResponse) GetGameAccount() uint64 {
	if x != nil {
		return x.GameAccount
	}
	return 0
}

func (x *VerifyWorldResponse) GetLocale() uint32 {
	if x != nil {
		return x.Locale
	}
	return 0
}

type AnnounceRealmMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealmID          uint64 `protobuf:"varint,1,opt,name=RealmID,proto3" json:"RealmID,omitempty"`
	Type             uint32 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	RealmName        string `protobuf:"bytes,3,opt,name=RealmName,proto3" json:"RealmName,omitempty"`
	RealmDescription string `protobuf:"bytes,4,opt,name=RealmDescription,proto3" json:"RealmDescription,omitempty"`
	Build            uint32 `protobuf:"varint,5,opt,name=Build,proto3" json:"Build,omitempty"`
	Address          string `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"`
	RedirectAddress  string `protobuf:"bytes,7,opt,name=RedirectAddress,proto3" json:"RedirectAddress,omitempty"`
	ActivePlayers    uint32 `protobuf:"varint,8,opt,name=ActivePlayers,proto3" json:"ActivePlayers,omitempty"`
	TotalPlayers     uint32 `protobuf:"varint,9,opt,name=TotalPlayers,proto3" json:"TotalPlayers,omitempty"`
	Timezone         uint32 `protobuf:"varint,10,opt,name=Timezone,proto3" json:"Timezone,omitempty"`
}

func (x *AnnounceRealmMsg) Reset() {
	*x = AnnounceRealmMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnounceRealmMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceRealmMsg) ProtoMessage() {}

func (x *AnnounceRealmMsg) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceRealmMsg.ProtoReflect.Descriptor instead.
func (*AnnounceRealmMsg) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{5}
}

func (x *AnnounceRealmMsg) GetRealmID() uint64 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *AnnounceRealmMsg) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AnnounceRealmMsg) GetRealmName() string {
	if x != nil {
		return x.RealmName
	}
	return ""
}

func (x *AnnounceRealmMsg) GetRealmDescription() string {
	if x != nil {
		return x.RealmDescription
	}
	return ""
}

func (x *AnnounceRealmMsg) GetBuild() uint32 {
	if x != nil {
		return x.Build
	}
	return 0
}

func (x *AnnounceRealmMsg) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AnnounceRealmMsg) GetRedirectAddress() string {
	if x != nil {
		return x.RedirectAddress
	}
	return ""
}

func (x *AnnounceRealmMsg) GetActivePlayers() uint32 {
	if x != nil {
		return x.ActivePlayers
	}
	return 0
}

func (x *AnnounceRealmMsg) GetTotalPlayers() uint32 {
	if x != nil {
		return x.TotalPlayers
	}
	return 0
}

func (x *AnnounceRealmMsg) GetTimezone() uint32 {
	if x != nil {
		return x.Timezone
	}
	return 0
}

type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{6}
}

func (x *Credentials) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Credentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   Status `protobuf:"varint,1,opt,name=Status,proto3,enum=Status" json:"Status,omitempty"`
	Tier     Tier   `protobuf:"varint,2,opt,name=Tier,proto3,enum=Tier" json:"Tier,omitempty"`
	WebToken string `protobuf:"bytes,3,opt,name=WebToken,proto3" json:"WebToken,omitempty"`
}

func (x *SessionInfo) Reset() {
	*x = SessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfo) ProtoMessage() {}

func (x *SessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfo.ProtoReflect.Descriptor instead.
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{7}
}

func (x *SessionInfo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *SessionInfo) GetTier() Tier {
	if x != nil {
		return x.Tier
	}
	return Tier_NormalPlayer
}

func (x *SessionInfo) GetWebToken() string {
	if x != nil {
		return x.WebToken
	}
	return ""
}

type EnlistRealmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebToken         string `protobuf:"bytes,1,opt,name=WebToken,proto3" json:"WebToken,omitempty"`
	RealmName        string `protobuf:"bytes,2,opt,name=RealmName,proto3" json:"RealmName,omitempty"`
	RealmFingerprint string `protobuf:"bytes,3,opt,name=RealmFingerprint,proto3" json:"RealmFingerprint,omitempty"`
}

func (x *EnlistRealmRequest) Reset() {
	*x = EnlistRealmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnlistRealmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnlistRealmRequest) ProtoMessage() {}

func (x *EnlistRealmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnlistRealmRequest.ProtoReflect.Descriptor instead.
func (*EnlistRealmRequest) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{8}
}

func (x *EnlistRealmRequest) GetWebToken() string {
	if x != nil {
		return x.WebToken
	}
	return ""
}

func (x *EnlistRealmRequest) GetRealmName() string {
	if x != nil {
		return x.RealmName
	}
	return ""
}

func (x *EnlistRealmRequest) GetRealmFingerprint() string {
	if x != nil {
		return x.RealmFingerprint
	}
	return ""
}

type EnlistRealmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status `protobuf:"varint,1,opt,name=Status,proto3,enum=Status" json:"Status,omitempty"`
	RealmID uint64 `protobuf:"varint,2,opt,name=RealmID,proto3" json:"RealmID,omitempty"`
}

func (x *EnlistRealmResponse) Reset() {
	*x = EnlistRealmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnlistRealmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnlistRealmResponse) ProtoMessage() {}

func (x *EnlistRealmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnlistRealmResponse.ProtoReflect.Descriptor instead.
func (*EnlistRealmResponse) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{9}
}

func (x *EnlistRealmResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *EnlistRealmResponse) GetRealmID() uint64 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

type SupportTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain      SupportDomain `protobuf:"varint,1,opt,name=Domain,proto3,enum=SupportDomain" json:"Domain,omitempty"`
	Type        SupportType   `protobuf:"varint,2,opt,name=Type,proto3,enum=SupportType" json:"Type,omitempty"`
	RealmID     uint64        `protobuf:"varint,3,opt,name=RealmID,proto3" json:"RealmID,omitempty"`
	Time        uint64        `protobuf:"varint,4,opt,name=Time,proto3" json:"Time,omitempty"`
	Account     uint64        `protobuf:"varint,5,opt,name=Account,proto3" json:"Account,omitempty"`         // Must be a valid account ID
	GameAccount uint64        `protobuf:"varint,6,opt,name=GameAccount,proto3" json:"GameAccount,omitempty"` // zero if not applicable
	Player      uint64        `protobuf:"varint,7,opt,name=Player,proto3" json:"Player,omitempty"`           // zero if not applicable
	ReportText  string        `protobuf:"bytes,8,opt,name=ReportText,proto3" json:"ReportText,omitempty"`
}

func (x *SupportTicket) Reset() {
	*x = SupportTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportTicket) ProtoMessage() {}

func (x *SupportTicket) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportTicket.ProtoReflect.Descriptor instead.
func (*SupportTicket) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{10}
}

func (x *SupportTicket) GetDomain() SupportDomain {
	if x != nil {
		return x.Domain
	}
	return SupportDomain_Other
}

func (x *SupportTicket) GetType() SupportType {
	if x != nil {
		return x.Type
	}
	return SupportType_Suggestion
}

func (x *SupportTicket) GetRealmID() uint64 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *SupportTicket) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SupportTicket) GetAccount() uint64 {
	if x != nil {
		return x.Account
	}
	return 0
}

func (x *SupportTicket) GetGameAccount() uint64 {
	if x != nil {
		return x.GameAccount
	}
	return 0
}

func (x *SupportTicket) GetPlayer() uint64 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *SupportTicket) GetReportText() string {
	if x != nil {
		return x.ReportText
	}
	return ""
}

type TicketSubmissionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketID string `protobuf:"bytes,1,opt,name=TicketID,proto3" json:"TicketID,omitempty"`
}

func (x *TicketSubmissionResult) Reset() {
	*x = TicketSubmissionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketSubmissionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketSubmissionResult) ProtoMessage() {}

func (x *TicketSubmissionResult) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketSubmissionResult.ProtoReflect.Descriptor instead.
func (*TicketSubmissionResult) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{11}
}

func (x *TicketSubmissionResult) GetTicketID() string {
	if x != nil {
		return x.TicketID
	}
	return ""
}

type TicketQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebToken string `protobuf:"bytes,1,opt,name=WebToken,proto3" json:"WebToken,omitempty"`
	DomainMask uint32 `protobuf:"varint,2,opt,name=DomainMask,proto3" json:"DomainMask,omitempty"`
	TypeMask   uint32 `protobuf:"varint,3,opt,name=TypeMask,proto3" json:"TypeMask,omitempty"`
	RealmID    int64  `protobuf:"varint,4,opt,name=RealmID,proto3" json:"RealmID,omitempty"`
}

func (x *TicketQuery) Reset() {
	*x = TicketQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketQuery) ProtoMessage() {}

func (x *TicketQuery) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketQuery.ProtoReflect.Descriptor instead.
func (*TicketQuery) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{12}
}

func (x *TicketQuery) GetWebToken() string {
	if x != nil {
		return x.WebToken
	}
	return ""
}

func (x *TicketQuery) GetDomainMask() uint32 {
	if x != nil {
		return x.DomainMask
	}
	return 0
}

func (x *TicketQuery) GetTypeMask() uint32 {
	if x != nil {
		return x.TypeMask
	}
	return 0
}

func (x *TicketQuery) GetRealmID() int64 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

type TicketEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     string         `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Ticket *SupportTicket `protobuf:"bytes,2,opt,name=Ticket,proto3" json:"Ticket,omitempty"`
}

func (x *TicketEntry) Reset() {
	*x = TicketEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketEntry) ProtoMessage() {}

func (x *TicketEntry) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketEntry.ProtoReflect.Descriptor instead.
func (*TicketEntry) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{13}
}

func (x *TicketEntry) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TicketEntry) GetTicket() *SupportTicket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

type TicketQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*TicketEntry `protobuf:"bytes,1,rep,name=Entries,proto3" json:"Entries,omitempty"`
}

func (x *TicketQueryResponse) Reset() {
	*x = TicketQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RpcNet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketQueryResponse) ProtoMessage() {}

func (x *TicketQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RpcNet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketQueryResponse.ProtoReflect.Descriptor instead.
func (*TicketQueryResponse) Descriptor() ([]byte, []int) {
	return file_RpcNet_proto_rawDescGZIP(), []int{14}
}

func (x *TicketQueryResponse) GetEntries() []*TicketEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

var File_RpcNet_proto protoreflect.FileDescriptor

var file_RpcNet_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x52, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2f, 0x0a, 0x0b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x07, 0x50, 0x69,
	0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x10, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x53, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47,
	0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x54, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x05, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x47,
	0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x6c, 0x6d, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x6c, 0x6d,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52,
	0x65, 0x61, 0x6c, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22,
	0x43, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x65, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x54, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x54, 0x69, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x57, 0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x57, 0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7a, 0x0a, 0x12, 0x45,
	0x6e, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x57, 0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52,
	0x65, 0x61, 0x6c, 0x6d, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x13, 0x45, 0x6e, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x22, 0xfb, 0x01, 0x0a, 0x0d, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x34, 0x0a, 0x16, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x22, 0x7f, 0x0a,
	0x0b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x57, 0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x57, 0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x22, 0x45,
	0x0a, 0x0b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x3d, 0x0a, 0x13, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2a, 0x66, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x10, 0x05, 0x2a, 0x43, 0x0a, 0x04,
	0x54, 0x69, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10,
	0x03, 0x2a, 0x32, 0x0a, 0x0d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65,
	0x61, 0x6c, 0x6d, 0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x0b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x75, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x10, 0x02, 0x32, 0xa6, 0x03, 0x0a, 0x0b, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x0c, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0x0c, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x1c, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x08, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x08, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73,
	0x67, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x6c, 0x6d, 0x12, 0x11, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x6c, 0x6d, 0x4d, 0x73, 0x67, 0x1a, 0x0a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x12, 0x11, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x14, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3a, 0x0a, 0x0b, 0x45, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x13,
	0x2e, 0x45, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x45, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x6c,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0c, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x17, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x0c, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x14, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09,
	0x2e, 0x2e, 0x2f, 0x72, 0x70, 0x63, 0x6e, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_RpcNet_proto_rawDescOnce sync.Once
	file_RpcNet_proto_rawDescData = file_RpcNet_proto_rawDesc
)

func file_RpcNet_proto_rawDescGZIP() []byte {
	file_RpcNet_proto_rawDescOnce.Do(func() {
		file_RpcNet_proto_rawDescData = protoimpl.X.CompressGZIP(file_RpcNet_proto_rawDescData)
	})
	return file_RpcNet_proto_rawDescData
}

var file_RpcNet_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_RpcNet_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_RpcNet_proto_goTypes = []interface{}{
	(Status)(0),                    // 0: Status
	(Tier)(0),                      // 1: Tier
	(SupportDomain)(0),             // 2: SupportDomain
	(SupportType)(0),               // 3: SupportType
	(*StatusMsg)(nil),              // 4: StatusMsg
	(*VersionData)(nil),            // 5: VersionData
	(*PingMsg)(nil),                // 6: PingMsg
	(*VerifyWorldQuery)(nil),       // 7: VerifyWorldQuery
	(*VerifyWorldResponse)(nil),    // 8: VerifyWorldResponse
	(*AnnounceRealmMsg)(nil),       // 9: AnnounceRealmMsg
	(*Credentials)(nil),            // 10: Credentials
	(*SessionInfo)(nil),            // 11: SessionInfo
	(*EnlistRealmRequest)(nil),     // 12: EnlistRealmRequest
	(*EnlistRealmResponse)(nil),    // 13: EnlistRealmResponse
	(*SupportTicket)(nil),          // 14: SupportTicket
	(*TicketSubmissionResult)(nil), // 15: TicketSubmissionResult
	(*TicketQuery)(nil),            // 16: TicketQuery
	(*TicketEntry)(nil),            // 17: TicketEntry
	(*TicketQueryResponse)(nil),    // 18: TicketQueryResponse
	(*emptypb.Empty)(nil),          // 19: google.protobuf.Empty
}
var file_RpcNet_proto_depIdxs = []int32{
	0,  // 0: StatusMsg.Status:type_name -> Status
	0,  // 1: VerifyWorldResponse.Status:type_name -> Status
	1,  // 2: VerifyWorldResponse.Tier:type_name -> Tier
	0,  // 3: SessionInfo.Status:type_name -> Status
	1,  // 4: SessionInfo.Tier:type_name -> Tier
	0,  // 5: EnlistRealmResponse.Status:type_name -> Status
	2,  // 6: SupportTicket.Domain:type_name -> SupportDomain
	3,  // 7: SupportTicket.Type:type_name -> SupportType
	14, // 8: TicketEntry.Ticket:type_name -> SupportTicket
	17, // 9: TicketQueryResponse.Entries:type_name -> TicketEntry
	10, // 10: HomeService.SignIn:input_type -> Credentials
	19, // 11: HomeService.GetVersionData:input_type -> google.protobuf.Empty
	6,  // 12: HomeService.Ping:input_type -> PingMsg
	9,  // 13: HomeService.AnnounceRealm:input_type -> AnnounceRealmMsg
	7,  // 14: HomeService.VerifyWorld:input_type -> VerifyWorldQuery
	12, // 15: HomeService.EnlistRealm:input_type -> EnlistRealmRequest
	14, // 16: HomeService.SubmitTicket:input_type -> SupportTicket
	16, // 17: HomeService.QueryTickets:input_type -> TicketQuery
	11, // 18: HomeService.SignIn:output_type -> SessionInfo
	5,  // 19: HomeService.GetVersionData:output_type -> VersionData
	6,  // 20: HomeService.Ping:output_type -> PingMsg
	4,  // 21: HomeService.AnnounceRealm:output_type -> StatusMsg
	8,  // 22: HomeService.VerifyWorld:output_type -> VerifyWorldResponse
	13, // 23: HomeService.EnlistRealm:output_type -> EnlistRealmResponse
	15, // 24: HomeService.SubmitTicket:output_type -> TicketSubmissionResult
	18, // 25: HomeService.QueryTickets:output_type -> TicketQueryResponse
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_RpcNet_proto_init() }
func file_RpcNet_proto_init() {
	if File_RpcNet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_RpcNet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyWorldQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyWorldResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnounceRealmMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnlistRealmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnlistRealmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketSubmissionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RpcNet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RpcNet_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_RpcNet_proto_goTypes,
		DependencyIndexes: file_RpcNet_proto_depIdxs,
		EnumInfos:         file_RpcNet_proto_enumTypes,
		MessageInfos:      file_RpcNet_proto_msgTypes,
	}.Build()
	File_RpcNet_proto = out.File
	file_RpcNet_proto_rawDesc = nil
	file_RpcNet_proto_goTypes = nil
	file_RpcNet_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: RpcNet.proto

package rpcnet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HomeServiceClient is the client API for HomeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeServiceClient interface {
	SignIn(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*SessionInfo, error)
	GetVersionData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionData, error)
	Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*PingMsg, error)
	AnnounceRealm(ctx context.Context, in *AnnounceRealmMsg, opts ...grpc.CallOption) (*StatusMsg, error)
	VerifyWorld(ctx context.Context, in *VerifyWorldQuery, opts ...grpc.CallOption) (*VerifyWorldResponse, error)
	EnlistRealm(ctx context.Context, in *EnlistRealmRequest, opts ...grpc.CallOption) (*EnlistRealmResponse, error)
	SubmitTicket(ctx context.Context, in *SupportTicket, opts ...grpc.CallOption) (*TicketSubmissionResult, error)
	QueryTickets(ctx context.Context, in *TicketQuery, opts ...grpc.CallOption) (*TicketQueryResponse, error)
}

type homeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeServiceClient(cc grpc.ClientConnInterface) HomeServiceClient {
	return &homeServiceClient{cc}
}

func (c *homeServiceClient) SignIn(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*SessionInfo, error) {
	out := new(SessionInfo)
	err := c.cc.Invoke(ctx, "/HomeService/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeServiceClient) GetVersionData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionData, error) {
	out := new(VersionData)
	err := c.cc.Invoke(ctx, "/HomeService/GetVersionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeServiceClient) Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*PingMsg, error) {
	out := new(PingMsg)
	err := c.cc.Invoke(ctx, "/HomeService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeServiceClient) AnnounceRealm(ctx context.Context, in *AnnounceRealmMsg, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := c.cc.Invoke(ctx, "/HomeService/AnnounceRealm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeServiceClient) VerifyWorld(ctx context.Context, in *VerifyWorldQuery, opts ...grpc.CallOption) (*VerifyWorldResponse, error) {
	out := new(VerifyWorldResponse)
	err := c.cc.Invoke(ctx, "/HomeService/VerifyWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeServiceClient) EnlistRealm(ctx context.Context, in *EnlistRealmRequest, opts ...grpc.CallOption) (*EnlistRealmResponse, error) {
	out := new(EnlistRealmResponse)
	err := c.cc.Invoke(ctx, "/HomeService/EnlistRealm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeServiceClient) SubmitTicket(ctx context.Context, in *SupportTicket, opts ...grpc.CallOption) (*TicketSubmissionResult, error) {
	out := new(TicketSubmissionResult)
	err := c.cc.Invoke(ctx, "/HomeService/SubmitTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeServiceClient) QueryTickets(ctx context.Context, in *TicketQuery, opts ...grpc.CallOption) (*TicketQueryResponse, error) {
	out := new(TicketQueryResponse)
	err := c.cc.Invoke(ctx, "/HomeService/QueryTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeServiceServer is the server API for HomeService service.
// All implementations must embed UnimplementedHomeServiceServer
// for forward compatibility
type HomeServiceServer interface {
	SignIn(context.Context, *Credentials) (*SessionInfo, error)
	GetVersionData(context.Context, *emptypb.Empty) (*VersionData, error)
	Ping(context.Context, *PingMsg) (*PingMsg, error)
	AnnounceRealm(context.Context, *AnnounceRealmMsg) (*StatusMsg, error)
	VerifyWorld(context.Context, *VerifyWorldQuery) (*VerifyWorldResponse, error)
	EnlistRealm(context.Context, *EnlistRealmRequest) (*EnlistRealmResponse, error)
	SubmitTicket(context.Context, *SupportTicket) (*TicketSubmissionResult, error)
	QueryTickets(context.Context, *TicketQuery) (*TicketQueryResponse, error)
	mustEmbedUnimplementedHomeServiceServer()
}

// UnimplementedHomeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHomeServiceServer struct {
}

func (UnimplementedHomeServiceServer) SignIn(context.Context, *Credentials) (*SessionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedHomeServiceServer) GetVersionData(context.Context, *emptypb.Empty) (*VersionData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionData not implemented")
}
func (UnimplementedHomeServiceServer) Ping(context.Context, *PingMsg) (*PingMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHomeServiceServer) AnnounceRealm(context.Context, *AnnounceRealmMsg) (*StatusMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceRealm not implemented")
}
func (UnimplementedHomeServiceServer) VerifyWorld(context.Context, *VerifyWorldQuery) (*VerifyWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyWorld not implemented")
}
func (UnimplementedHomeServiceServer) EnlistRealm(context.Context, *EnlistRealmRequest) (*EnlistRealmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnlistRealm not implemented")
}
func (UnimplementedHomeServiceServer) SubmitTicket(context.Context, *SupportTicket) (*TicketSubmissionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTicket not implemented")
}
func (UnimplementedHomeServiceServer) QueryTickets(context.Context, *TicketQuery) (*TicketQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTickets not implemented")
}
func (UnimplementedHomeServiceServer) mustEmbedUnimplementedHomeServiceServer() {}

// UnsafeHomeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeServiceServer will
// result in compilation errors.
type UnsafeHomeServiceServer interface {
	mustEmbedUnimplementedHomeServiceServer()
}

func RegisterHomeServiceServer(s grpc.ServiceRegistrar, srv HomeServiceServer) {
	s.RegisterService(&HomeService_ServiceDesc, srv)
}

func _HomeService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HomeService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).SignIn(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeService_GetVersionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).GetVersionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HomeService/GetVersionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).GetVersionData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HomeService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).Ping(ctx, req.(*PingMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeService_AnnounceRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnounceRealmMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).AnnounceRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HomeService/AnnounceRealm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).AnnounceRealm(ctx, req.(*AnnounceRealmMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeService_VerifyWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyWorldQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).VerifyWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HomeService/VerifyWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).VerifyWorld(ctx, req.(*VerifyWorldQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeService_EnlistRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnlistRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).EnlistRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HomeService/EnlistRealm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).EnlistRealm(ctx, req.(*EnlistRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeService_SubmitTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).SubmitTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HomeService/SubmitTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).SubmitTicket(ctx, req.(*SupportTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeService_QueryTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).QueryTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HomeService/QueryTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).QueryTickets(ctx, req.(*TicketQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeService_ServiceDesc is the grpc.ServiceDesc for HomeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HomeService",
	HandlerType: (*HomeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _HomeService_SignIn_Handler,
		},
		{
			MethodName: "GetVersionData",
			Handler:    _HomeService_GetVersionData_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _HomeService_Ping_Handler,
		},
		{
			MethodName: "AnnounceRealm",
			Handler:    _HomeService_AnnounceRealm_Handler,
		},
		{
			MethodName: "VerifyWorld",
			Handler:    _HomeService_VerifyWorld_Handler,
		},
		{
			MethodName: "EnlistRealm",
			Handler:    _HomeService_EnlistRealm_Handler,
		},
		{
			MethodName: "SubmitTicket",
			Handler:    _HomeService_SubmitTicket_Handler,
		},
		{
			MethodName: "QueryTickets",
			Handler:    _HomeService_QueryTickets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "RpcNet.proto",
}
